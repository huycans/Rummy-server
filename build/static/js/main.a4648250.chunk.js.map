{"version":3,"sources":["js/context.js","js/components/Signin.js","js/components/Signup.js","js/components/AuthRoute.js","js/components/lib/card.js/cards.js","js/constants.js","js/components/API/game.js","js/components/GameHandler.js","js/components/helper.js","js/components/Game.js","js/components/Default.js","js/components/API/account.js","js/components/Stats.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","ContextProvider","props","Provider","value","this","children","Component","ContextConsumer","Consumer","Signin","handleInputUsername","handleInputPassword","username","password","signin","signingIn","e","preventDefault","className","htmlFor","maxLength","type","name","onChange","onClick","style","marginTop","to","Signup","signup","signingUp","minLength","AuthRoute","isSignedIn","cards","opt","cardSize","width","height","padding","animationSpeed","table","cardback","acesHigh","cardsUrl","blackJoker","redJoker","loop","zIndexCounter","all","start","end","mouseEvent","ev","card","$","data","container","handler","_click","func","call","context","window","Card","suit","rank","init","Container","Deck","options","Hand","Pile","prototype","shortName","toUpperCase","faceUp","el","css","position","cursor","addClass","appendTo","showCard","moveToFront","resize","size","toString","moveTo","x","y","speed","callback","top","left","animate","rotate","angle","xpos","ypos","hideCard","Array","extend","obj","prop","addCard","addCards","i","length","removeCard","push","splice","click","mousedown","_mousedown","mouseup","_mouseup","render","calcPosition","parseInt","targetTop","targetLeft","queue","immediate","me","flip","setTimeout","topCard","Math","round","deal","count","hands","totalCount","dealOne","forEach","index","sort","j","temp","dealCounter","hasOwnProperty","l","on","getFakeCards","SIZE","SERVER_URL","process","SERVER_API","requestJoin","code","userToken","a","fetch","encodeURIComponent","method","headers","Accept","Authorization","response","json","responseJSON","status","message","gameHandler","JSON","parse","cmd","dealing","draw","discard","moveMeldToPile","moveCardToMeld","declareWinner","setErrorMessage","history","setState","giveCardValue","makeHistory","map","move","ind","key","player","from","meld","score","Game","state","isMelding","isAddingToMeld","isWaiting","isDrawing","isDiscarding","hasDrawn","hasDiscarded","tableName","deck","myhand","ophand","discardPile","meldPile","currentMeld","currentSelectedCardHand","currentSelectedCardDeck","currentSelectedCardDiscard","currentSelectedMeld","token","hint","hasGameEnded","winner","gamedraw","lobbycode","handRef","createRef","startGame","bind","handleMeld","handleAddToMeld","cancelMeldOrAddToMeld","sortHand","setGameState","joinGameWithCode","sendWSData","setHint","handleLobbyCode","target","hide","websocket","onopen","event","Cards","onmessage","addEventListener","close","lobby","send","stringify","joinResponse","userId","user","id","hasGameStarted","cardToDiscard","find","cardVal","stateToSet","addtionalStates","cardToDraw","pop","stopPropagation","test","startingGame","self","cardToAdd","cardInd","opcards","melds","meldArr","newMeld","myturn","drawPhase","cardToMoveToMeld","meldToAdd","meldId","validMeld","abs","meldToMove","isCurrentMeldValid","some","disableAddToMeldButton","placeholder","Fragment","location","reload","disabled","Default","body","ok","Error","err","checkSession","sessionToken","success","Stats","userInfo","updateUserInfo","gameHistory","gamePlayed","gameWon","gameLost","gameDraw","game","App","errorMsg","isFinishedLoading","toggleLoading","validateUsernamePassword","serverWebsocketURL","WSS","localstate","localStorage","getItem","clear","WebSocket","isLoading","setItem","path","exact","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a4648250.chunk.js","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\n/**\r\n * COntext is used to store the state of the application and pass it down\r\n * to components, using ContextConsumer\r\n *\r\n * @class ContextProvider\r\n * @extends {Component}\r\n */\r\nclass ContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={{\r\n        ...this.props.value\r\n      }}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ContextConsumer = AppContext.Consumer;\r\nexport { ContextProvider, ContextConsumer };","import React from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nconst Signin = ({ handleInputUsername, handleInputPassword, username, password, signin }) => {\r\n  const signingIn = (e) => {\r\n    e.preventDefault();\r\n    signin();\r\n  }\r\n  return (\r\n    <ContextConsumer>\r\n      {value =>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <h1>Welcome to Rummy</h1>\r\n          </div>\r\n          <div className=\"row\">\r\n            <h2>Signin</h2>\r\n          </div>\r\n          <div className=\"row\">\r\n            <form>\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Username: &nbsp;\r\n                    <input  maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                    onChange={handleInputUsername} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Password: &nbsp;\r\n                  <input  maxLength={50} type=\"password\" name=\"password\" value={password}\r\n                    onChange={handleInputPassword} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <input type=\"submit\" value=\"Signin\" onClick={signingIn} />\r\n              </div>\r\n            </form>\r\n            <div style={{marginTop: \"20px\"}} className=\"row\">\r\n              <p>\r\n                Username must be between 3 and 50 characters, contains only alphanumerics or special characters (@._).\r\n              </p>\r\n              <p>\r\n                Password must be between 8 and 20 characters, at least one uppercase letter, one lowercase letter, one number and one special character (@$!%*?&_).\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <br />\r\n            <br />\r\n            <h4>Don't have an account yet?</h4>\r\n            <Link to=\"/signup\">Click here</Link>\r\n          </div>\r\n        </div>\r\n      }\r\n    </ContextConsumer>\r\n  );\r\n};\r\nexport default Signin;","import React from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst Signup = ({ handleInputUsername, handleInputPassword, username, password, signup }) => {\r\n  const signingUp = (e) => {\r\n    e.preventDefault();\r\n    signup();\r\n  }\r\n    return (\r\n      <ContextConsumer>\r\n        {value =>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <h1>Welcome to Rummy</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n              <h2>Signup</h2>\r\n            </div>\r\n            <div className=\"row\">\r\n              <form>\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Username: &nbsp;\r\n                    <input minLength={3} maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                      onChange={handleInputUsername} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Password: &nbsp;\r\n                  <input minLength={8} maxLength={20} type=\"password\" name=\"password\" value={password}\r\n                      onChange={handleInputPassword} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <input type=\"submit\" value=\"Signup\" onClick={signingUp}/>\r\n                </div>\r\n              </form>\r\n              <div style={{ marginTop: \"20px\" }} className=\"row\">\r\n                <p>\r\n                  Username must be between 3 and 50 characters, contains only alphanumerics or special characters (@._).\r\n              </p>\r\n                <p>\r\n                  Password must be between 8 and 20 characters, at least one uppercase letter, one lowercase letter, one number and one special character (@$!%*?&_).\r\n              </p>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <br />\r\n              <br />\r\n              <h4>Already have an account?</h4>\r\n              <Link to=\"/\">Click here</Link>\r\n            </div>\r\n          </div>\r\n        }\r\n      </ContextConsumer>\r\n      )\r\n}\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\n//HOC to redirect user to game if authenticated, to signin if not\r\nconst AuthRoute = props => {\r\n  const { isSignedIn, type } = props;\r\n  if (type === \"guest\" && isSignedIn) return <Redirect to=\"/game\" />;\r\n  else if (type === \"private\" && !isSignedIn) return <Redirect to=\"/\" />;\r\n\r\n  return <Route {...props} >\r\n  </Route>;\r\n};\r\n\r\nexport default AuthRoute;","import $ from \"jquery\";\r\n\r\nconst STANDARD = 0;\r\n\r\nvar cards = function() {\r\n  //The global options\r\n  var opt = {\r\n    cardSize: {\r\n      width: 69,\r\n      height: 94,\r\n      padding: 18\r\n    },\r\n    animationSpeed: 100,\r\n    table: 'body',\r\n    cardback: 'red',\r\n    acesHigh: false,\r\n    cardsUrl: 'img/cards.png',\r\n    blackJoker: false,\r\n    redJoker: false,\r\n    type: STANDARD,\r\n    loop: 1\r\n  };\r\n  var zIndexCounter = 1;\r\n  var all = []; //All the cards created.\r\n  var start = 1;\r\n  var end = start + 12;\r\n\r\n  function mouseEvent(ev) {\r\n    var card = $(this).data('card');\r\n    if (card.container) {\r\n      var handler = card.container._click;\r\n      if (handler) {\r\n        handler.func.call(handler.context || window, card, ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getFakeCards() {\r\n    return new Card('bj', 0, opt.table);\r\n  }\r\n  function init(options) {\r\n    if (options) {\r\n      for (var i in options) {\r\n        if (opt.hasOwnProperty(i)) {\r\n          opt[i] = options[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    opt.acesHigh = false;\r\n    start = opt.acesHigh ? 2 : 1;\r\n    end = start + 12;\r\n\r\n\r\n    opt.table = $(opt.table)[0];\r\n    if ($(opt.table).css('position') == 'static') {\r\n      $(opt.table).css('position', 'relative');\r\n    }\r\n    for (let l = 0; l < opt.loop; l++)\r\n      for (var i = start; i <= end; i++) {\r\n        all.push(new Card('c', i, opt.table));\r\n        all.push(new Card('d', i, opt.table));\r\n        all.push(new Card('h', i, opt.table));\r\n        all.push(new Card('s', i, opt.table));\r\n      }\r\n    if (opt.blackJoker) {\r\n      all.push(new Card('bj', 0, opt.table));\r\n    }\r\n    if (opt.redJoker) {\r\n      all.push(new Card('rj', 0, opt.table));\r\n    }\r\n    \r\n    $('.card').on(\"click\", mouseEvent);\r\n    // shuffle(all);\r\n  }\r\n\r\n  // function shuffle(deck) {\r\n  //   //Fisher yates shuffle\r\n  //   var i = deck.length;\r\n  //   if (i == 0) return;\r\n  //   while (--i) {\r\n  //     var j = Math.floor(Math.random() * (i + 1));\r\n  //     var tempi = deck[i];\r\n  //     var tempj = deck[j];\r\n  //     deck[i] = tempj;\r\n  //     deck[j] = tempi;\r\n  //   }\r\n  // }\r\n\r\n  function Card(suit, rank, table) {\r\n    this.init(suit, rank, table);\r\n  }\r\n\r\n  Card.prototype = {\r\n    init: function(suit, rank, table) {\r\n      this.shortName = suit + rank;\r\n      this.suit = suit;\r\n      this.rank = rank;\r\n      this.name = suit.toUpperCase() + rank;\r\n      this.faceUp = false;\r\n      this.el = $('<div/>').css({\r\n        width: opt.cardSize.width,\r\n        height: opt.cardSize.height,\r\n        \"background-image\": 'url(' + opt.cardsUrl + ')',\r\n        position: 'absolute',\r\n        cursor: 'pointer'\r\n      }).addClass('card').data('card', this).appendTo($(table));\r\n      this.showCard();\r\n      this.moveToFront();\r\n    },\r\n\r\n    resize: function (size) {\r\n      switch (size) {\r\n        case \"small\":\r\n          $(this.el).css({\r\n            width: 20,\r\n            height: 47\r\n          })\r\n          break;\r\n\r\n        case \"default\":\r\n          $(this.el).css({\r\n            width: opt.cardSize.width,\r\n            height: opt.cardSize.height\r\n          })\r\n          break;\r\n        default:\r\n\r\n          break;\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return this.name;\r\n    },\r\n\r\n    moveTo: function(x, y, speed, callback) {\r\n      var props = {\r\n        top: y - (opt.cardSize.height / 2),\r\n        left: x - (opt.cardSize.width / 2)\r\n      };\r\n      $(this.el).animate(props, speed || opt.animationSpeed, callback);\r\n    },\r\n\r\n    rotate: function(angle) {\r\n      $(this.el)\r\n        .css('-webkit-transform', 'rotate(' + angle + 'deg)')\r\n        .css('-moz-transform', 'rotate(' + angle + 'deg)')\r\n        .css('-ms-transform', 'rotate(' + angle + 'deg)')\r\n        .css('transform', 'rotate(' + angle + 'deg)')\r\n        .css('-o-transform', 'rotate(' + angle + 'deg)');\r\n    },\r\n\r\n    showCard: function() {\r\n      var offsets = {\r\n        \"c\": 0,\r\n        \"d\": 1,\r\n        \"h\": 2,\r\n        \"s\": 3,\r\n        \"rj\": 2,\r\n        \"bj\": 3\r\n      };\r\n      var xpos, ypos;\r\n      var rank = this.rank;\r\n      if (rank == 14) {\r\n        rank = 1; //Aces high must work as well.\r\n      }\r\n      xpos = -rank * opt.cardSize.width;\r\n      ypos = -offsets[this.suit] * opt.cardSize.height;\r\n      this.rotate(0);\r\n      $(this.el).css('background-position', xpos + 'px ' + ypos + 'px');\r\n    },\r\n\r\n    hideCard: function(position) {\r\n      var y = opt.cardback == 'red' ? 0 * opt.cardSize.height : -1 * opt.cardSize.height;\r\n      $(this.el).css('background-position', '0px ' + y + 'px');\r\n      this.rotate(0);\r\n    },\r\n\r\n    moveToFront: function() {\r\n      $(this.el).css('z-index', zIndexCounter++);\r\n    }\r\n  };\r\n\r\n  function Container() {\r\n\r\n  }\r\n\r\n  Container.prototype = new Array();\r\n  Container.prototype.extend = function(obj) {\r\n    for (var prop in obj) {\r\n      this[prop] = obj[prop];\r\n    }\r\n  }\r\n  Container.prototype.extend({\r\n    addCard: function(card) {\r\n      this.addCards([card]);\r\n    },\r\n\r\n    addCards: function(cards) {\r\n      for (var i = 0; i < cards.length; i++) {\r\n        var card = cards[i];\r\n        if (card.container) {\r\n          card.container.removeCard(card);\r\n        }\r\n        this.push(card);\r\n        card.container = this;\r\n      }\r\n    },\r\n\r\n    removeCard: function(card) {\r\n      for (var i = 0; i < this.length; i++) {\r\n        if (this[i] == card) {\r\n          this.splice(i, 1);\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    init: function(options) {\r\n      options = options || {};\r\n      this.x = options.x || $(opt.table).width() / 2;\r\n      this.y = options.y || $(opt.table).height() / 2;\r\n      this.faceUp = options.faceUp;\r\n    },\r\n\r\n    click: function(func, context) {\r\n      this._click = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    mousedown: function(func, context) {\r\n      this._mousedown = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    mouseup: function(func, context) {\r\n      this._mouseup = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    render: function(options) {\r\n      options = options || {};\r\n      var speed = options.speed || opt.animationSpeed;\r\n      this.calcPosition(options);\r\n      for (var i = 0; i < this.length; i++) {\r\n        var card = this[i];\r\n        zIndexCounter++;\r\n        card.moveToFront();\r\n        var top = parseInt($(card.el).css('top'));\r\n        var left = parseInt($(card.el).css('left'));\r\n        if (top != card.targetTop || left != card.targetLeft) {\r\n          var props = {\r\n            top: card.targetTop,\r\n            left: card.targetLeft,\r\n            queue: false\r\n          };\r\n          if (options.immediate) {\r\n            $(card.el).css(props);\r\n          } else {\r\n            $(card.el).animate(props, speed);\r\n          }\r\n        }\r\n      }\r\n      var me = this;\r\n      var flip = function() {\r\n        for (var i = 0; i < me.length; i++) {\r\n          if (me.faceUp) {\r\n            me[i].showCard();\r\n          } else {\r\n            me[i].hideCard();\r\n          }\r\n        }\r\n      }\r\n      if (options.immediate) {\r\n        flip();\r\n      } else {\r\n        setTimeout(flip, speed / 2);\r\n      }\r\n\r\n      if (options.callback) {\r\n        setTimeout(options.callback, speed);\r\n      }\r\n    },\r\n\r\n    topCard: function() {\r\n      return this[this.length - 1];\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Container';\r\n    }\r\n  });\r\n\r\n  function Deck(options) {\r\n    this.init(options);\r\n  }\r\n\r\n  Deck.prototype = new Container();\r\n  Deck.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n      var left = Math.round(this.x - opt.cardSize.width / 2, 0);\r\n      var top = Math.round(this.y - opt.cardSize.height / 2, 0);\r\n      var condenseCount = 6;\r\n      for (var i = 0; i < this.length; i++) {\r\n        if (i > 0 && i % condenseCount == 0) {\r\n          top -= 1;\r\n          left -= 1;\r\n        }\r\n        this[i].targetTop = top;\r\n        this[i].targetLeft = left;\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Deck';\r\n    },\r\n\r\n    deal: function(count, hands, speed, callback) {\r\n      var me = this;\r\n      var i = 0;\r\n      var totalCount = count * hands.length;\r\n\r\n      function dealOne() {\r\n        if (me.length == 0 || i == totalCount) {\r\n          if (callback) {\r\n            callback();\r\n          }\r\n          return;\r\n        }\r\n        hands[i % hands.length].addCard(me.topCard());\r\n        hands[i % hands.length].render({\r\n          callback: dealOne,\r\n          speed: speed\r\n        });\r\n        i++;\r\n      }\r\n      dealOne();\r\n    }\r\n  });\r\n\r\n  function Hand(options) {\r\n    this.init(options);\r\n  }\r\n  Hand.prototype = new Container();\r\n  Hand.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n      var width = opt.cardSize.width + (this.length - 1) * opt.cardSize.padding;\r\n      var left = Math.round(this.x - width / 2);\r\n      var top = Math.round(this.y - opt.cardSize.height / 2, 0);\r\n      for (var i = 0; i < this.length; i++) {\r\n        this[i].targetTop = top;\r\n        this[i].targetLeft = left + i * opt.cardSize.padding;\r\n      }\r\n    },\r\n    resize: function (size) {\r\n      switch (size) {\r\n        case \"small\":\r\n          this.forEach((card, index) => {\r\n            card.resize(\"small\");\r\n          });\r\n          break;\r\n        case \"default\":\r\n          this.forEach((card, index) => {\r\n            card.resize(\"default\");\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n\r\n    sort: function () {\r\n      for (var i=0; i<this.length-1; i++ ){\r\n        for (var j = 0; j < this.length - i - 1; j++)\r\n          if (this[j].suit < this[j+1].suit ||\r\n            (this[j].suit == this[j + 1].suit && this[j].rank > this[j + 1].rank)){\r\n              var temp = this[j];\r\n              this[j] = this[j + 1];\r\n              this[j + 1] = temp; \r\n            }\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Hand';\r\n    }\r\n\r\n  });\r\n\r\n  function Pile(options) {\r\n    this.init(options);\r\n  }\r\n\r\n  Pile.prototype = new Container();\r\n  Pile.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Pile';\r\n    },\r\n\r\n    deal: function(count, hands) {\r\n      if (!this.dealCounter) {\r\n        this.dealCounter = count * hands.length;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return {\r\n    init: init,\r\n    all: all,\r\n    getFakeCards: getFakeCards,\r\n    options: opt,\r\n    SIZE: opt.cardSize,\r\n    Card: Card,\r\n    Container: Container,\r\n    Deck: Deck,\r\n    Hand: Hand,\r\n    Pile: Pile,\r\n    // shuffle: shuffle\r\n  };\r\n};\r\n\r\nexport default cards;\r\n","const SERVER_URL = process.env.SERVER_URL || \"http://localhost:3000\";\r\n\r\nconst SERVER_API = {\r\n  SIGNIN: \"/user/signin\",\r\n  SIGNUP: \"/user/signup\",\r\n  SIGNOUT: \"/signout\",\r\n  TOKENCHECK: \"/user/checkJWTToken\",\r\n  JOIN: \"/join\"\r\n}\r\n\r\nexport { SERVER_URL, SERVER_API}","import { SERVER_URL, SERVER_API } from '../../constants';\r\n\r\nasync function requestJoin(code, userToken) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.JOIN + \"/\" + encodeURIComponent(code) , {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + userToken\r\n      }\r\n    });\r\n    let responseJSON = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw responseJSON.message;\r\n    } \r\n\r\n    return responseJSON;\r\n  }\r\n  catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport { requestJoin }","\r\n\r\n//handle what happens when a cmd is received from the server\r\n//this refers to game.js\r\n//split up to avoid 1000s of lines of code\r\nfunction gameHandler(message){\r\n  let data = JSON.parse(message.data);\r\n  // console.log(\"data from server\", data);\r\n\r\n  //initial setup with deck, discardPile and my hand\r\n  if (data.cmd === \"cards\") {\r\n    //setstate deck, discardPile, hand, op's hand\r\n    this.dealing(data);\r\n  } else if (data.cmd == \"draw\") {\r\n    this.draw(data);\r\n  } else if (data.cmd == \"discard\") {\r\n    this.discard(data);\r\n  } else if (data.cmd == \"newmeld\") {\r\n    this.moveMeldToPile(data)\r\n  } else if (data.cmd == \"addmeld\") {\r\n    this.moveCardToMeld(data);\r\n  } else if (data.cmd == \"win\" || data.cmd == \"loss\" || data.cmd == \"gamedraw\") {\r\n    this.declareWinner(data)\r\n  } else if (data.cmd == \"exit\") {\r\n    this.props.setErrorMessage(\"Lobby is full or not available. Please choose another lobby code.\")\r\n  } else if (data.cmd == \"error\") {\r\n    this.props.setErrorMessage(data.message)\r\n  }\r\n\r\n  if (data.history){\r\n    this.setState({history: data.history})\r\n  }\r\n}\r\n\r\nexport default gameHandler;","import React from 'react';\r\n\r\nconst giveCardValue = (card) => {\r\n  let rank = 0;\r\n  switch (card.rank) {\r\n    case 11:\r\n      rank = \"J\";\r\n      break;\r\n    case 12:\r\n      rank = \"Q\";\r\n      break;\r\n    case 13:\r\n      rank = \"K\";\r\n      break;\r\n    default:\r\n      rank = card.rank;\r\n      break;\r\n  }\r\n  return \"\" + rank + card.suit.toUpperCase();\r\n};\r\n\r\nconst makeHistory = (history) => {\r\n  return history.map((move, ind) => {\r\n    if (move.cmd == \"draw\") {\r\n      return <div key={ind}>Player {move.player} draws {giveCardValue(move.card)} from {move.from} <br /></div>;\r\n    }\r\n    else if (move.cmd == \"discard\") {\r\n      return <div key={ind}>Player {move.player} discards {giveCardValue(move.card)}<br /></div>;\r\n    }\r\n    else if (move.cmd == \"newmeld\") {\r\n      return <div key={ind}>Player {move.player} melds {move.meld.map((card) => giveCardValue(card) + \" \")}<br /></div>;\r\n    }\r\n    else if (move.cmd == \"addmeld\") {\r\n      return <div key={ind}>Player {move.player} adds {giveCardValue(move.card)} to make meld {move.meld.map((card) => giveCardValue(card) + \" \")}<br /></div>;\r\n    }\r\n    else if (move.cmd == \"win\" || move.cmd == \"loss\") {\r\n      return <div key={ind}>Player {move.player} won with {move.score} points<br /></div>;\r\n    }\r\n    else if (move.cmd == \"gamedraw\") {\r\n      return <div key={ind}>The game ended in a draw.<br /></div>;\r\n    }\r\n  });\r\n};\r\n\r\nexport { giveCardValue, makeHistory}","import React, { Component } from \"react\";\r\n// import Deck from './Cards/lib/deck';\r\nimport Cards from './lib/card.js/cards';\r\nimport $ from 'jquery';\r\n\r\nimport { requestJoin } from \"../components/API/game\";\r\nimport gameHandler from \"./GameHandler\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeHistory } from \"./helper\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMelding: false, //(pick 3 cards to meld)\r\n      isAddingToMeld: false, //(add 1 card to 1 of the melds)\r\n      isWaiting: false, //(for server command, other player's turn...)\r\n      isDrawing: false, //(from deck or discard pile)\r\n      isDiscarding: false, //(remove 1 card from hand to discard pile),\r\n      hasDrawn: false,\r\n      hasDiscarded: false,\r\n      cards: null,\r\n      tableName: null,\r\n      deck: null,\r\n      myhand: null,\r\n      ophand: null,\r\n      discardPile: null,\r\n      meldPile: null,\r\n      currentMeld: null,\r\n      currentSelectedCardHand: null,\r\n      currentSelectedCardDeck: null,\r\n      currentSelectedCardDiscard: null,\r\n      currentSelectedMeld: null,\r\n      //the game code to distinguish games, called lobby in server\r\n      code: \"\",\r\n      //randomly generated token from the server\r\n      token: \"\",\r\n      hint: \"\",\r\n      hasGameEnded: false,\r\n      winner: false,\r\n      gamedraw: false,\r\n      score: 0,\r\n      lobbycode: \"\",\r\n      history: []\r\n    };\r\n\r\n    this.handRef = React.createRef();\r\n    this.startGame = this.startGame.bind(this);\r\n    this.handleMeld = this.handleMeld.bind(this);\r\n    this.handleAddToMeld = this.handleAddToMeld.bind(this);\r\n    this.cancelMeldOrAddToMeld = this.cancelMeldOrAddToMeld.bind(this);\r\n    this.dealing = this.dealing.bind(this);\r\n    this.sortHand = this.sortHand.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n    this.discard = this.discard.bind(this);\r\n    this.setGameState = this.setGameState.bind(this);\r\n    this.joinGameWithCode = this.joinGameWithCode.bind(this);\r\n    this.sendWSData = this.sendWSData.bind(this);\r\n    this.gameHandler = gameHandler.bind(this);\r\n    this.moveMeldToPile = this.moveMeldToPile.bind(this);\r\n    this.setHint = this.setHint.bind(this);\r\n    this.declareWinner = this.declareWinner.bind(this);\r\n    this.handleLobbyCode = this.handleLobbyCode.bind(this);\r\n  }\r\n\r\n  handleLobbyCode(e){\r\n    this.setState({lobbycode: e.target.value});\r\n  }\r\n\r\n  declareWinner(data){\r\n    this.setState({\r\n      hasGameEnded: true,\r\n      winner: data.cmd == \"win\" ? true: false,\r\n      gamedraw: data.cmd == \"gamedraw\" ? true : false,\r\n      score: data.score\r\n    });\r\n    //hide all the cards on the screen\r\n    this.state.cards.all.forEach((card) => $(card.el).hide());\r\n    this.state.ophand.forEach((card) => $(card.el).hide());\r\n    this.state.myhand.forEach((card) => $(card.el).hide());\r\n    this.state.discardPile.forEach((card) => $(card.el).hide());\r\n    this.state.meldPile.forEach(\r\n      (meld => {\r\n        meld.forEach(\r\n          (card) => $(card.el).hide()\r\n        )\r\n      })\r\n      );\r\n  }\r\n\r\n  setHint(message) {\r\n    this.setState({ hint: message });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { websocket } = this.props;\r\n    //setup websocket events\r\n    websocket.onopen = (event) => {\r\n      // console.log(\"Connected to server.\");\r\n    };\r\n\r\n    //starting an instance of card.js\r\n    var cards = Cards();\r\n    const tableName = '#card-table';\r\n\r\n    //Tell the library which element to use for the table\r\n    cards.init({ table: tableName });\r\n    this.setState({ cards, tableName });\r\n\r\n    websocket.onmessage = (message) => {\r\n      this.gameHandler(message);\r\n    };\r\n\r\n    window.addEventListener('beforeunload', () => { // Attempts to Close Socket before forced disconnect\r\n      if (websocket) websocket.close();\r\n    });\r\n  }\r\n\r\n  //used to send data to the server, as string\r\n  sendWSData(data) {\r\n    let { websocket, userToken } = this.props;\r\n    // console.log(\"WEBSOCKET\", websocket);\r\n    const { code, token } = this.state;\r\n    //always includes token and game code when sending data\r\n    data.lobby = code;\r\n    data.token = token;\r\n    data.userToken = userToken;\r\n    // Send Data (as string)\r\n    websocket.send(JSON.stringify(data));\r\n  }\r\n\r\n  //setup websocket connection to the server\r\n  async joinGameWithCode(code, userToken) {\r\n    try {\r\n      //request to join a game with code typed in by user\r\n      let joinResponse = await requestJoin(code, userToken);\r\n\r\n      let token = joinResponse.token;\r\n      // console.log(token);\r\n\r\n      this.setState({\r\n        code, token\r\n      });\r\n\r\n      let userId = this.props.user.id;\r\n\r\n      //send request to join a game\r\n      this.sendWSData({ cmd: \"join\", userId: userId });\r\n\r\n    } catch (error) {\r\n      // console.log(\"An error occurs when trying to join: \", error);\r\n      this.props.setErrorMessage(\"An error occurs when trying to join \" + error);\r\n      this.setState({\r\n        hasGameStarted: false\r\n      })\r\n    }\r\n  }\r\n\r\n  discard(data) {\r\n    let { myhand, discardPile, ophand, deck } = this.state;\r\n    let cardToDiscard = data.card;\r\n\r\n    //if i am discarding the card\r\n    if (data.player == \"me\") {\r\n\r\n      discardPile.addCard(myhand.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n      myhand.removeCard(myhand.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n\r\n      this.setGameState(\"isWaiting\", { hasDiscarded: true, currentSelectedCardHand: null });\r\n    }\r\n    else {\r\n      //the opponent is discarding a card\r\n      //remove the top fake card from ophand, then add the card to discard from deck to ophand\r\n      $(ophand.topCard().el).hide();\r\n      ophand.removeCard(ophand.topCard());\r\n      ophand.addCard(deck.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n      //then place the card from ophand into discard pile\r\n      discardPile.addCard(ophand.topCard());\r\n\r\n      //since the opponent is discarding, it is my turn\r\n      this.setGameState(\"isDrawing\", { hasDiscarded: false, hasDrawn: false });\r\n    }\r\n    ophand.sort();\r\n    myhand.render();\r\n    ophand.render();\r\n    discardPile.render();\r\n    deck.render();\r\n  }\r\n\r\n  setGameState(stateToSet, addtionalStates = {}) {\r\n    let hint = \"\";\r\n    switch (stateToSet) {\r\n      case \"isMelding\":\r\n        hint = \"Please choose 3 cards that have the same rank but different suit, or same suit but in sequence.\";\r\n        break;\r\n      case \"isAddingToMeld\":\r\n        hint = \"Please choose a card, then click on a preexisiting meld that you want to lay off to.\";\r\n        break;\r\n      case \"isWaiting\":\r\n        hint = \"Waiting for other player move.\";\r\n        break;\r\n      case \"isDrawing\":\r\n        hint = \"Please draw a card from the deck or the discard pile.\";\r\n        break;\r\n      case \"isDiscarding\":\r\n        hint = \"Please choose a card from your hand to discard or you can create a meld.\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      isMelding: stateToSet == \"isMelding\" ? true : false, //(pick 3 cards to meld)\r\n      isAddingToMeld: stateToSet == \"isAddingToMeld\" ? true : false, //(add 1 card to 1 of the melds)\r\n      isWaiting: stateToSet == \"isWaiting\" ? true : false, //(for server command, other player's turn...)\r\n      isDrawing: stateToSet == \"isDrawing\" ? true : false, //(from deck or discard pile)\r\n      isDiscarding: stateToSet == \"isDiscarding\" ? true : false, //(remove 1 card from hand to discard pile),\r\n      hint,\r\n      ...addtionalStates\r\n    });\r\n  }\r\n\r\n  draw(data) {\r\n    let {  deck, discardPile, myhand, ophand, cards } = this.state;\r\n    let self = this;\r\n    //if i am drawing the card\r\n    // if (isDrawing && data.player == \"me\") { isDrawing is not needed anymore since the server will dictate when and where to draw\r\n    if (data.player == \"me\") {\r\n      let cardToDraw = data.card;\r\n      if (data.from == \"deck\") {\r\n        //if draw from deck\r\n        myhand.addCard(deck.find((cardVal) => cardVal.suit == cardToDraw.suit && cardVal.rank == cardToDraw.rank));\r\n\r\n        self.setGameState(\"isDiscarding\", {\r\n          currentSelectedCardDeck: null,\r\n          currentSelectedCardDiscard: null,\r\n          hasDrawn: true\r\n        });\r\n      } else {\r\n        //if draw from discard pile\r\n        myhand.addCard(discardPile.topCard());\r\n\r\n        self.setGameState(\"isDiscarding\", {\r\n          currentSelectedCardDeck: null,\r\n          currentSelectedCardDiscard: null,\r\n          hasDrawn: true\r\n        });\r\n      }\r\n      deck.render();\r\n      myhand.render();\r\n      ophand.render();\r\n      discardPile.render();\r\n    }\r\n    else {\r\n      //the opponent is drawing a card\r\n      if (data.from == \"deck\") {\r\n        //if draw from deck\r\n        deck.addCard(cards.getFakeCards());\r\n        deck.render({ immediate: true });\r\n        ophand.addCard(deck.topCard());\r\n        deck.render();\r\n        myhand.render();\r\n        ophand.render();\r\n        discardPile.render();\r\n      } else {\r\n        //if draw from discard pile\r\n        ophand.addCard(discardPile.topCard());\r\n        ophand.render();\r\n        discardPile.render();\r\n        //do this to make sure ophand contains only fake cards\r\n        deck.addCard(ophand.topCard());\r\n        ophand.addCard(cards.getFakeCards());\r\n        //invisible render\r\n        ophand.render({ immediate: true });\r\n        deck.render({ immediate: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  cancelMeldOrAddToMeld() {\r\n    let { currentMeld, myhand, isMelding, isAddingToMeld } = this.state;\r\n    if (isMelding || isAddingToMeld) {\r\n      //return all cards from currentMeld to myhand\r\n      const length = currentMeld.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let card = currentMeld.pop();\r\n        myhand.addCard(card);\r\n        currentMeld.removeCard(card);\r\n        myhand.render();\r\n        currentMeld.render();\r\n      }\r\n      this.setGameState(\"isDiscarding\", { currentSelectedCardHand: null });\r\n    }\r\n  }\r\n\r\n  sortHand() {\r\n    let { myhand } = this.state;\r\n    myhand.sort();\r\n    myhand.render();\r\n  }\r\n\r\n  startGame(e) {\r\n    if (e) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    let { cards, lobbycode } = this.state;\r\n    this.props.setErrorMessage(\"\");\r\n    let lobbycodeRegex = /^[a-zA-Z0-9]{5,12}$/;\r\n    if (lobbycode == \"\" || !lobbycodeRegex.test(lobbycode)){\r\n      this.props.setErrorMessage(\"Room code must contain between 5 and 12 alphanumeric characters.\");\r\n      return;\r\n    }\r\n\r\n    this.props.startingGame();\r\n\r\n\r\n    //Create a new deck of cards\r\n    var deck = new cards.Deck();\r\n    //By default it's in the middle of the container, put it slightly to the side\r\n    deck.x -= 50;\r\n\r\n    //adding all cards to the deck\r\n    deck.addCards(cards.all);\r\n\r\n    //No animation here, just get the deck onto the table.\r\n    deck.render({ immediate: true });\r\n\r\n    //Now lets create a couple of hands, one face down, one face up.\r\n    var myhand = new cards.Hand({ faceUp: true, y: 340 });\r\n    var ophand = new cards.Hand({ faceUp: false, y: 60 });\r\n\r\n    //Lets add a discard pile\r\n    var discardPile = new cards.Deck({ faceUp: true });\r\n    discardPile.x += 50;\r\n\r\n    var meldPile = [];\r\n\r\n    //this holds the 3 cards that user want to meld\r\n    //set it to slightly overlap the deck\r\n    var currentMeld = new cards.Hand({ faceUp: true, x: deck.x + 20, y: deck.y + 20 });\r\n\r\n    //setup click event, these will simply set the clicked card into state and call relevant event handler\r\n    let self = this;\r\n    myhand.click(function (card) {\r\n      if (self.state.isMelding) {\r\n        self.setState({ currentSelectedCardHand: card }, () => self.handleMeld());\r\n      }\r\n      if (self.state.isDiscarding) {\r\n        self.setState({ currentSelectedCardHand: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"discard\",\r\n            suit: card.suit,\r\n            rank: card.rank\r\n          });\r\n        });\r\n      }\r\n      if (self.state.isAddingToMeld) {\r\n        self.setState({ currentSelectedCardHand: card }, () => self.handleAddToMeld());\r\n      }\r\n    });\r\n\r\n    deck.click(function (card) {\r\n      if (self.state.isDrawing)\r\n        self.setState({ currentSelectedCardDeck: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"draw\",\r\n            from: \"deck\"\r\n          });\r\n\r\n          //this should be called when receiving command\r\n          // self.draw();\r\n        });\r\n\r\n    });\r\n\r\n    discardPile.click(function (card) {\r\n      if (self.state.isDrawing)\r\n        self.setState({ currentSelectedCardDiscard: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"draw\",\r\n            from: \"discardPile\",\r\n            rank: card.rank,\r\n            suit: card.suit\r\n          });\r\n        });\r\n    });\r\n\r\n    //saving state\r\n    this.setState({\r\n      cards,\r\n      deck,\r\n      myhand,\r\n      ophand,\r\n      discardPile,\r\n      meldPile,\r\n      currentMeld\r\n    });\r\n\r\n    //setup websocket connection and handle it\r\n    this.joinGameWithCode(lobbycode, this.props.userToken);\r\n\r\n  }\r\n\r\n  //setup the initial layout of the table\r\n  dealing(data) {\r\n    //data is from the server\r\n    //this is simply the animation, because the cards dealt is given by the server\r\n    const { cards, discardPile, deck, myhand, ophand, meldPile } = this.state;\r\n\r\n    //adding cards that is in player's hand\r\n    for (let card of data.cards) {\r\n      let cardToAdd = cards.all.find(\r\n        (cardVal, cardInd) => {\r\n          return cardVal.suit == card.suit && cardVal.rank == card.rank;\r\n        }\r\n      );\r\n      myhand.addCard(cardToAdd);\r\n    }\r\n\r\n    //adding cards in the discard pile\r\n    for (let card of data.discardPile) {\r\n      discardPile.addCard(cards.all.find((cardVal, cardInd) => cardVal.suit == card.suit && cardVal.rank == card.rank));\r\n    }\r\n\r\n    //fill ophand with fake cards\r\n    for (let i = 0; i < data.opcards; i++) {\r\n      ophand.addCard(cards.getFakeCards());\r\n    }\r\n\r\n    //adding melds\r\n    for (let meld of data.melds) {\r\n      //adding the cards in the current meld \r\n      let meldArr = [];\r\n      for (let card of meld) {\r\n        let cardToAdd = cards.all.find(\r\n          (cardVal, cardInd) => {\r\n            return cardVal.suit == card.suit && cardVal.rank == card.rank;\r\n          });\r\n        meldArr.push(cardToAdd);\r\n      }\r\n\r\n      let newMeld = new cards.Hand({ faceUp: true, y: 1 });\r\n\r\n      const length = meldArr.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let card = meldArr.pop();\r\n        newMeld.addCard(card);\r\n      }\r\n      newMeld.sort();\r\n      newMeld.x = newMeld.x - 230;\r\n      newMeld.y = newMeld.y + (meldPile.length + 1) * 250 / 5;\r\n\r\n      let self = this;\r\n      newMeld.click(function (card) {\r\n        if (self.state.isAddingToMeld) {\r\n          self.setState({ currentSelectedMeld: newMeld }, () => self.handleAddToMeld());\r\n        }\r\n      });\r\n\r\n      meldPile.push(newMeld);\r\n      newMeld.resize(\"small\");\r\n      newMeld.render();\r\n    }\r\n    //now, render everything\r\n    deck.render();\r\n    discardPile.render();\r\n    myhand.render();\r\n    ophand.render();\r\n\r\n    if (data.myturn) {\r\n      //if it is my turn\r\n      if (data.drawPhase) {\r\n        //drawing stage\r\n        this.setGameState(\"isDrawing\");\r\n      } else {\r\n        this.setGameState(\"isDiscarding\", { hasDrawn: true });\r\n      }\r\n    }\r\n    else {\r\n      this.setGameState(\"isWaiting\");\r\n    }\r\n  }\r\n\r\n  //server has accepted the request to add card to meld, now move the card to meld\r\n  moveCardToMeld(data) {\r\n    let cardToMoveToMeld = data.card;\r\n    let { currentMeld, myhand, ophand, deck, meldPile } = this.state;\r\n    //i am doing the adding\r\n    if (data.player == 'me') {\r\n      let { currentSelectedMeld } = this.state;\r\n      //make sure the card that server says to add is the same that the client request to add\r\n      if (cardToMoveToMeld.rank == currentMeld[0].rank && cardToMoveToMeld.suit == currentMeld[0].suit) {\r\n        // let cardToAddToMeld = currentMeld.pop();\r\n        currentSelectedMeld.addCard(currentMeld.topCard());\r\n        // currentMeld.removeCard(cardToAddToMeld);\r\n      } else {\r\n        //for some reason, the client card and server's card is not the same, ignore client card\r\n\r\n        this.cancelMeldOrAddToMeld();\r\n        //move cards from myhand to the meld that needs adding\r\n\r\n        //the card in local game\r\n        let card = myhand.find((cardVal) => cardVal.rank == cardToMoveToMeld.rank && cardVal.suit == cardToMoveToMeld.suit);\r\n        currentSelectedMeld.addCard(card);\r\n        // myhand.removeCard(card);\r\n      }\r\n      this.setState({ currentSelectedCardHand: null, currentSelectedMeld: null }, () => setTimeout(() => this.setGameState(\"isDiscarding\"), 500));//avoid race condition with myhand.click event\r\n      currentSelectedMeld.sort();\r\n      currentSelectedMeld.resize(\"small\");\r\n      currentSelectedMeld.render();\r\n      currentMeld.render();\r\n      ophand.render();\r\n      myhand.render();\r\n    }\r\n    else {\r\n      //the opponent is doing the adding\r\n      //assume that ophand has only fake cards, any card ophand drew is actually in deck\r\n\r\n      //the card in local game\r\n      let card = deck.find((cardVal) => cardVal.suit == cardToMoveToMeld.suit && cardVal.rank == cardToMoveToMeld.rank);\r\n\r\n      $(ophand.topCard().el).hide();\r\n      ophand.removeCard(ophand.topCard());\r\n      // ophand.render({ immediate: true });\r\n      \r\n      ophand.addCard(card);\r\n      //avoid rendering\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n\r\n      let meldToAdd = meldPile[data.meldId];\r\n      //move cards from ophand to currentSelectedMeld\r\n      meldToAdd.addCard(ophand.topCard());\r\n      // ophand.removeCard(card);\r\n\r\n      //render\r\n      meldToAdd.sort();\r\n      meldToAdd.resize(\"small\");\r\n      meldToAdd.render();\r\n      ophand.render();\r\n    }\r\n  }\r\n\r\n  //handle add a card to meld on client side, if the card is valid then it is sent to server\r\n  handleAddToMeld() {\r\n    let { isAddingToMeld, currentMeld, myhand, currentSelectedCardHand, currentSelectedMeld } = this.state;\r\n    if (isAddingToMeld) {\r\n      //reuse currentMeld to store the card to add\r\n      //in this usage, currentMeld should have only 1 card\r\n      if (currentMeld.length === 0) {\r\n        //no card yet\r\n        currentMeld.addCard(currentSelectedCardHand);\r\n        myhand.removeCard(currentSelectedCardHand);\r\n        currentMeld.sort();\r\n        myhand.render();\r\n        currentMeld.render();\r\n      } else if (currentMeld.length === 1) {\r\n        if (currentSelectedMeld != null) {\r\n          let card = currentMeld[0];//the only card inside currentMeld\r\n          //check if card to add to meld is valid for currentSelectedMeld\r\n          if ((currentSelectedMeld[0].suit === card.suit && currentSelectedMeld[0].rank - 1 === card.rank)\r\n            || (currentSelectedMeld[currentSelectedMeld.length - 1].suit === card.suit && currentSelectedMeld[currentSelectedMeld.length - 1].rank + 1 === card.rank)\r\n            || (currentSelectedMeld[0].suit != card.suit && currentSelectedMeld[0].rank == card.rank \r\n            && currentSelectedMeld[1].rank == card.rank\r\n            && currentSelectedMeld[2].rank == card.rank)\r\n          ) {\r\n            //if the card is same suit and less than 1 from the first card in meld, or greater than 1 from the last card in meld\r\n            this.sendWSData({\r\n              cmd: \"addmeld\",\r\n              card: {\r\n                suit: card.suit,\r\n                rank: card.rank\r\n              },\r\n              meldId: currentSelectedMeld.id\r\n            });\r\n          }\r\n          else this.setHint(\"Cannot add this card into this meld\");\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //this function handles melding process client side only, it does not move cards into the meld pile\r\n  handleMeld() {\r\n    let validMeld = false;\r\n    let { myhand, currentMeld } = this.state;\r\n    let card = this.state.currentSelectedCardHand;\r\n\r\n    //if there are less then 3 cards, just add them to currentMeld\r\n    if (currentMeld.length < 2) {\r\n      currentMeld.addCard(card);\r\n      myhand.removeCard(card);\r\n      currentMeld.sort();\r\n      myhand.render();\r\n      currentMeld.render();\r\n    }\r\n    else if (currentMeld.length == 2) {\r\n      //currentMeld has 2 cards already, adding a third will perform a check\r\n      //if check is valid, add cards to the meld pile\r\n      currentMeld.addCard(card);\r\n      myhand.removeCard(card);\r\n      currentMeld.sort();\r\n      //three in a row, same suit\r\n      if (currentMeld[0].suit == currentMeld[1].suit && currentMeld[1].suit == currentMeld[2].suit) {\r\n        if (Math.abs(currentMeld[0].rank - currentMeld[1].rank) == 1\r\n          && Math.abs((currentMeld[1].rank - currentMeld[2].rank)) == 1) {\r\n          validMeld = true;\r\n        }\r\n      }\r\n      else {\r\n        //or three of same rank, diff suit\r\n        if ((currentMeld[0].rank) == currentMeld[1].rank && (currentMeld[1].rank) == currentMeld[2].rank) {\r\n          validMeld = true;\r\n        }\r\n      }\r\n      if (validMeld) {\r\n        //the meld is valid, send a cmd to meld to server\r\n        this.sendWSData({\r\n          cmd: \"newmeld\",\r\n          player: \"me\",\r\n          meld: currentMeld.map((card) => {\r\n            return { suit: card.suit, rank: card.rank };\r\n          })//array with 3 cards\r\n        });\r\n      }\r\n      else {\r\n        this.setHint(\"Meld not valid\");\r\n      }\r\n      myhand.render();\r\n      currentMeld.render();\r\n    }\r\n  }\r\n\r\n  moveMeldToPile(data) {\r\n    let { cards, meldPile, currentMeld, myhand, ophand, deck } = this.state;\r\n    let meldToMove = data.meld; //this is the meld given by server; currentMeld is the local meld\r\n    let newMeld = new cards.Hand({ faceUp: true, y: 1 });\r\n\r\n    //i am doing the melding\r\n    if (data.player == 'me') {\r\n      let isCurrentMeldValid = true;\r\n      //make sure the meld that we are moving to the meld pile is the same as the meld the client has chosen\r\n      if (meldToMove.length === currentMeld.length) {\r\n        for (let i = 0; i < meldToMove.length; i++) {\r\n          if (!currentMeld.some((cardVal) => cardVal.rank == meldToMove[i].rank && cardVal.suit == meldToMove[i].suit)) {\r\n            //if a card in meldToMove not exist in currentMeld, then currentMeld is invalid\r\n            isCurrentMeldValid = false;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        isCurrentMeldValid = false;\r\n      }\r\n\r\n      //this should not happen, unless something weird happens with the server or the player cheated somehow\r\n      if (!isCurrentMeldValid) {\r\n        //ignore currentMeld and use meldToMove instead\r\n        //cancel the currentMeld\r\n        this.cancelMeldOrAddToMeld();\r\n        //move cards from myhand to the meldPile\r\n        let length = meldToMove.length;\r\n        for (let i = 0; i < length; i++) {\r\n          let card = myhand.pop();\r\n          newMeld.addCard(card);\r\n          currentMeld.removeCard(card);\r\n        }\r\n      } else {\r\n        //the normal, expected flow\r\n        let length = meldToMove.length;\r\n        for (let i = 0; i < length; i++) {\r\n          let card = currentMeld.pop();\r\n          newMeld.addCard(card);\r\n          currentMeld.removeCard(card);\r\n          //add id of the meld to newMeld, this is useful when adding a card to a meld\r\n        }\r\n      }\r\n      this.setState({ currentSelectedCardHand: null }, () => setTimeout(() => this.setGameState(\"isDiscarding\"), 500));//avoid race condition with myhand.click event\r\n\r\n    }\r\n    //the other player is doing the melding\r\n    else if (data.player == \"op\") {\r\n      //assume that ophand has only fake cards, any card ophand drew is actually in deck\r\n\r\n      //remove 3 cards from ophand\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        $(ophand.topCard().el).hide()\r\n        ophand.removeCard(ophand.topCard());\r\n        ophand.render({ immediate: true });\r\n      }\r\n\r\n      //add cards from deck to ophand\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        ophand.addCard(deck.find((cardVal) => cardVal.suit == meldToMove[i].suit && cardVal.rank == meldToMove[i].rank));\r\n      }\r\n      //avoid rendering\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n\r\n      //move cards from ophand to newMeld\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        newMeld.addCard(ophand.topCard());\r\n      }\r\n    }\r\n    //sort the card without rendering\r\n    newMeld.sort();\r\n    newMeld.render({ immediate: true });\r\n\r\n    newMeld.x = newMeld.x - 230;\r\n    newMeld.y = newMeld.y + (meldPile.length + 1) * 250 / 5;\r\n\r\n    let self = this;\r\n    newMeld.id = data.meldId;\r\n    newMeld.click(function (card) {\r\n      if (self.state.isAddingToMeld) {\r\n        self.setState({ currentSelectedMeld: newMeld }, () => self.handleAddToMeld());\r\n      }\r\n    });\r\n\r\n    meldPile.push(newMeld);\r\n    newMeld.resize(\"small\");\r\n    newMeld.render();\r\n    currentMeld.render();\r\n  }\r\n\r\n  render() {\r\n    const { hasGameStarted } = this.props;\r\n    const { isMelding, hasDiscarded, hasDrawn, isWaiting, \r\n      isAddingToMeld, hint, winner, gamedraw, \r\n      score, hasGameEnded, lobbycode, history } = this.state;\r\n    const disableAddToMeldButton = () => {\r\n      if (isWaiting) {\r\n        return true;\r\n      } else if (isMelding || isAddingToMeld) {\r\n        //or melding/AddToMeld is in progress\r\n        return true;\r\n      }\r\n      else if (hasDrawn && !hasDiscarded) {\r\n        //if user has drawn a card but has not discard a card yet\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div id=\"history_list\">\r\n          {makeHistory(history)}\r\n        </div>\r\n        <p>Welcome to the game</p>\r\n        <p><Link to=\"/stats\">View your stats</Link> </p>\r\n        <div id=\"hint\">\r\n          {hasGameStarted && !hasGameEnded ? hint : null}\r\n        </div>\r\n        <div id=\"lobbycode\">\r\n          <label className={!hasGameStarted ? \"inline\" : \"none\" }>Enter a room code (must contains between 5 and 12 alphanumeric characters): &nbsp;&nbsp;\r\n          <input className={!hasGameStarted ? \"inline\" : \"none\"}\r\n              value={lobbycode} onChange={this.handleLobbyCode}\r\n              type=\"text\" placeholder=\"Room code\" />\r\n          </label>\r\n        </div>\r\n\r\n        <button id=\"start-btn\" className={!hasGameStarted ? \"block\" : \"none\"} \r\n          onClick={this.startGame}>Start the game</button>\r\n        {\r\n          hasGameEnded ? \r\n            <div id=\"game-winner\">\r\n              {gamedraw ? \r\n                <h1>The deck is out of cards. The game is a draw.</h1>\r\n                :\r\n                <React.Fragment>\r\n                  <h1>{winner ? \"You have won\" : \"You have lost\"}</h1>\r\n                  <h2>{winner ? \"Your score: \" : \"Your opponent score: \"} {score}</h2>\r\n                </React.Fragment>\r\n              }\r\n              \r\n              <button id=\"replay\" onClick={() => window.location.reload()}>Play another game</button>\r\n            </div>\r\n            : \r\n            <div id=\"card-table\">\r\n              <button disabled={disableAddToMeldButton()} className={hasGameStarted ? \"block\" : \"none\"}\r\n                id=\"meld\"\r\n                onClick={() => this.setGameState(\"isMelding\")}\r\n              >Meld</button>\r\n\r\n              <button disabled={disableAddToMeldButton()} className={hasGameStarted ? \"block\" : \"none\"}\r\n                id=\"addtomeld\"\r\n                onClick={() => this.setGameState(\"isAddingToMeld\")}\r\n              >Add to meld</button>\r\n\r\n              <button className={hasGameStarted && (isMelding || isAddingToMeld) ? \"block\" : \"none\"} \r\n                id=\"cancel-meld\" onClick={this.cancelMeldOrAddToMeld}\r\n              >Cancel</button>\r\n\r\n              <button className={hasGameStarted ? \"block\" : \"none\" }\r\n                id=\"sort-hand\" onClick={this.sortHand}\r\n              >Sort hand</button>\r\n            </div>\r\n        }\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst Default = () => {\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <h1>404 not found</h1>\r\n        <Link to=\"/\">Back to main page</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Default;","import {SERVER_URL, SERVER_API} from '../../constants';\r\n\r\nasync function signin(username, password){\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNIN, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status !== 200 && response.ok === false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function signup(username, password) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNUP, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status != 200 && response.ok == false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function checkSession(sessionToken) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.TOKENCHECK, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \"Bearer \" + sessionToken\r\n      }\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (responseJSON.success == false && responseJSON.status == \"JWT invalid\") {\r\n      return null;\r\n    } else {\r\n      return responseJSON.user;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport { signin, signup, checkSession }","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { makeHistory } from \"./helper\";\r\nimport { checkSession } from \"./API/account\";\r\n\r\n\r\nexport default class Stats extends Component {\r\n  async componentDidMount(){\r\n    let userInfo = await checkSession(this.props.userToken);\r\n    this.props.updateUserInfo(userInfo);\r\n  }\r\n\r\n  render() {\r\n    let { user } = this.props;\r\n    let history = [];\r\n    for (let i = 0; i < user.gameHistory.length; i++) {\r\n      history.push(JSON.parse(user.gameHistory[i]));\r\n    }\r\n    return (\r\n      <ContextConsumer>\r\n        {value =>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div>\r\n                <h2>Hello {user.username}</h2>\r\n                <h6>You have played {user.gamePlayed} games</h6>\r\n                <h6>You have won {user.gameWon} games</h6>\r\n                <h6>You have lost {user.gameLost} games</h6>\r\n                <h6>{user.gameDraw} games ended in a draw</h6>\r\n                <br />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Link to=\"/game\">Back to game</Link>\r\n            </div>\r\n            <br />\r\n            <h4>Your previous game histories</h4>\r\n            <div className=\"row\">\r\n              {history.map((game, ind) => {\r\n                return <div key={ind} className=\"col\">\r\n                  {makeHistory(game)};\r\n              </div>;\r\n              })}\r\n\r\n            </div>\r\n          </div>\r\n        }\r\n      </ContextConsumer>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport { ContextProvider } from \"./js/context\";\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Signin from \"./js/components/Signin\";\nimport Signup from './js/components/Signup';\nimport AuthRoute from \"./js/components/AuthRoute\";\nimport Game from \"./js/components/Game\";\nimport DefaultRoute from \"./js/components/Default\";\n\nimport { signin, signup, checkSession } from './js/components/API/account';\n\nimport {\n  BrowserRouter,\n  Switch,\n} from \"react-router-dom\";\nimport Stats from \"./js/components/Stats\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Hello from context store\",\n      errorMsg: \"\",\n      username: \"\",\n      password: \"\",\n      user: null,\n      userToken: \"\",\n      hasGameStarted: false,\n      websocket: null,\n      isFinishedLoading: false\n    };\n    this.toggleLoading = this.toggleLoading.bind(this);\n    this.signin = this.signin.bind(this);\n    this.signup = this.signup.bind(this);\n    this.handleInputUsername = this.handleInputUsername.bind(this);\n    this.handleInputPassword = this.handleInputPassword.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n    this.startingGame = this.startingGame.bind(this);\n    this.validateUsernamePassword = this.validateUsernamePassword.bind(this);\n    this.updateUserInfo = this.updateUserInfo.bind(this);\n\n  } \n\n  updateUserInfo(userInfo){\n    this.setState({\n      user: {\n        ...this.state.user,\n        gameWon: userInfo.gameWon,\n        gameLost: userInfo.gameLost,\n        gamePlayed: userInfo.gamePlayed,\n        gameHistory: userInfo.gameHistory,\n        gameDraw: userInfo.gameDraw\n      }\n    })\n  }\n\n  async componentDidMount() {\n    \n    //setup websocket\n    let serverWebsocketURL = process.env.WSS || \"ws://localhost:3000\";\n    // this.setState({ websocket: new WebSocket(serverWebsocketURL) });\n\n    try {\n      //check if game state still valid\n      let localstate = JSON.parse(localStorage.getItem(\"appState\"));\n      // console.log(\"localstate\", localstate);\n      if (localstate) {\n        //if local game state exist\n        //assume that local game state only exist if the user has signin/signup before\n        let userInfo = await checkSession(localstate.userToken);\n        if (userInfo!=null) {\n          this.setState({\n            user: localstate.user,\n            username: localstate.username,\n            userToken: localstate.userToken\n          });\n        }\n        else {\n          //token is no longer valid, delete localStorage\n          localStorage.clear();\n        }\n\n      }\n      this.setState({\n        isFinishedLoading: true,\n        websocket: new WebSocket(serverWebsocketURL)\n      });\n\n    } catch (error) {\n      // console.log(error);\n      this.setState({\n        isFinishedLoading: true,\n        errorMsg: \"Cannot check user's token. Please signin again.\"\n      });\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (this.state.websocket) {\n      this.state.websocket.close();\n    }\n  }\n\n  startingGame() {\n    //assume user has signin or signup\n    this.setState({\n      hasGameStarted: true\n    });\n\n  }\n  handleInputUsername(event) {\n    this.setState({ username: event.target.value });\n  }\n\n  handleInputPassword(event) {\n    this.setState({ password: event.target.value });\n  }\n  setErrorMessage(message) {\n    // throw Error(message);\n    this.setState({ errorMsg: message });\n  }\n\n  validateUsernamePassword(){\n    const {username, password} = this.state;\n    //username length must be between 3 and 50\n    let passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&_])[A-Za-z\\d@$!%*?&_]{8,20}$/;\n    let usernameRegex = /^[A-Za-z\\d@._]{3,50}$/;\n    if (!usernameRegex.test(username) || !passwordRegex.test(password) ){\n      return false;\n    }\n    return true;\n\n  }\n  async signin() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    if (this.validateUsernamePassword()) {\n      try {\n        //message will be a userToken, save it\n        let response = await signin(this.state.username, this.state.password);\n        this.setState({\n          userToken: response.token,\n          user: response.user\n        });\n\n        //save user's info\n        localStorage.setItem(\"appState\", JSON.stringify({\n          username: this.state.username,\n          user: this.state.user,\n          userToken: this.state.userToken,\n        }));\n\n\n      } catch (error) {\n        this.setErrorMessage(error.message);\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    }\n    else {\n      this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n    }\n  }\n\n  async signup() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    if (this.validateUsernamePassword()){\n      try {\n        //message will be a userToken, save it\n        let response = await signup(this.state.username, this.state.password);\n\n        this.setState({\n          userToken: response.token,\n          user: response.user,\n        });\n\n        //save user's info\n        localStorage.setItem(\"appState\", JSON.stringify({\n          username: this.state.username,\n          user: this.state.user,\n          userToken: this.state.userToken,\n        }));\n\n      } catch (error) {\n        this.setErrorMessage(error.message);\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    }\n    else {\n      this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n    }\n  }\n\n  toggleLoading() {\n    //toggle the spinning icon \n  }\n  render() {\n    const { errorMsg, username, password, user, userToken, hasGameStarted, websocket, isFinishedLoading } = this.state;\n    const isSignedIn = user !== null && userToken !== \"\";\n    return (\n      <BrowserRouter>\n        <ContextProvider value={this.state}>\n          <div className=\"App\">\n            {\n              isFinishedLoading ?\n                <div>\n                  <div className=\"error-message\">\n                    {errorMsg ? errorMsg : null}\n\n                  </div>\n                  <Switch>\n                    <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/signup\">\n                      <Signup signup={this.signup} handleInputUsername={this.handleInputUsername}\n                        handleInputPassword={this.handleInputPassword}\n                        username={username} password={password} />\n                    </AuthRoute>\n\n                    {websocket != null ?\n                      <AuthRoute isSignedIn={isSignedIn} type=\"private\" path=\"/game\">\n                        <Game hasGameStarted={hasGameStarted}\n                          startingGame={this.startingGame}\n                          setErrorMessage={this.setErrorMessage}\n                          websocket={websocket}\n                          userToken={userToken}\n                          user={user}\n                        />\n                      </AuthRoute>\n                      : null\n                    }\n\n                    {user != null ?\n                      <AuthRoute isSignedIn={isSignedIn} type=\"private\" path=\"/stats\">\n                        <Stats \n                          user={user}\n                          userToken={userToken}\n                          updateUserInfo={this.updateUserInfo}\n                        />\n                      </AuthRoute>\n                      : null\n                    }\n\n                    <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/\" exact>\n                      <Signin signin={this.signin} handleInputUsername={this.handleInputUsername}\n                        handleInputPassword={this.handleInputPassword}\n                        username={username} password={password} />\n                    </AuthRoute>\n\n                    <DefaultRoute/>\n                  </Switch>\n                </div>\n                : <p>Is Loading</p>\n            }\n\n          </div>\n        </ContextProvider>\n      </BrowserRouter>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}