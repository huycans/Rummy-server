{"version":3,"sources":["js/context.js","js/components/Signin.js","js/components/Signup.js","js/components/AuthRoute.js","js/components/Game.js","js/constants.js","js/components/API/account.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","ContextProvider","props","Provider","value","this","children","Component","ContextConsumer","Consumer","Signin","handleInputUsername","handleInputPassword","username","password","signin","signingIn","e","preventDefault","className","htmlFor","maxLength","type","name","onChange","onClick","to","Signup","signup","signingUp","minLength","AuthRoute","isSignedIn","Game","SERVER_URL","SERVER_API","a","fetch","method","headers","Accept","body","JSON","stringify","response","json","responseJSON","status","ok","Error","err","message","App","state","errorMsg","token","user","toggleLoading","bind","validate","setErrorMessage","event","setState","target","isLoading","length","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d88fcc86.chunk.js","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\n/**\r\n * COntext is used to store the state of the application and pass it down\r\n * to components, using ContextConsumer\r\n *\r\n * @class ContextProvider\r\n * @extends {Component}\r\n */\r\nclass ContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={{\r\n        ...this.props.value\r\n      }}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ContextConsumer = AppContext.Consumer;\r\nexport { ContextProvider, ContextConsumer };","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nconst Signin = ({ handleInputUsername, handleInputPassword, username, password, signin }) => {\r\n  const signingIn = (e) => {\r\n    e.preventDefault();\r\n    signin();\r\n  }\r\n  return (\r\n    <ContextConsumer>\r\n      {value =>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <h1>Welcome to Rummy</h1>\r\n          </div>\r\n          <div className=\"row\">\r\n            <h2>Signin</h2>\r\n          </div>\r\n          <div className=\"row\">\r\n            <form>\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Username: &nbsp;\r\n                    <input  maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                    onChange={handleInputUsername} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Password: &nbsp;\r\n                  <input  maxLength={50} type=\"password\" name=\"password\" value={password}\r\n                    onChange={handleInputPassword} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <input type=\"submit\" value=\"Signin\" onClick={signingIn} />\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div>\r\n            <br />\r\n            <br />\r\n            <h4>Don't have an account yet?</h4>\r\n            <Link to=\"/signup\">Click here</Link>\r\n          </div>\r\n        </div>\r\n      }\r\n    </ContextConsumer>\r\n  );\r\n};\r\nexport default Signin;","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst Signup = ({ handleInputUsername, handleInputPassword, username, password, signup }) => {\r\n  const signingUp = (e) => {\r\n    e.preventDefault();\r\n    signup();\r\n  }\r\n    return (\r\n      <ContextConsumer>\r\n        {value =>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <h1>Welcome to Rummy</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n              <h2>Signup</h2>\r\n            </div>\r\n            <div className=\"row\">\r\n              <form>\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Username: &nbsp;\r\n                    <input minLength={3} maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                      onChange={handleInputUsername} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Password: &nbsp;\r\n                  <input minLength={5} maxLength={50} type=\"password\" name=\"password\" value={password}\r\n                      onChange={handleInputPassword} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <input type=\"submit\" value=\"Signup\" onClick={signingUp}/>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div>\r\n              <br />\r\n              <br />\r\n              <h4>Already have an account?</h4>\r\n              <Link to=\"/\">Click here</Link>\r\n            </div>\r\n          </div>\r\n        }\r\n      </ContextConsumer>\r\n      )\r\n}\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\n//HOC to redirect user to game if authenticated, to signin if not\r\nconst AuthRoute = props => {\r\n  const { isSignedIn, type } = props;\r\n  if (type === \"guest\" && isSignedIn) return <Redirect to=\"/game\" />;\r\n  else if (type === \"private\" && !isSignedIn) return <Redirect to=\"/\" />;\r\n\r\n  return <Route {...props} >\r\n  </Route>;\r\n};\r\n\r\nexport default AuthRoute;","import React from \"react\";\r\n\r\nconst Game = props => {\r\n\r\n  return (\r\n    <div>\r\n      <p>Welcome to the game</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;","const SERVER_URL = \"https://localhost:3000\";\r\n\r\nconst SERVER_API = {\r\n  SIGNIN: \"/user/signin\",\r\n  SIGNUP: \"/user/signup\",\r\n  SIGNOUT: \"/signout\"\r\n}\r\n\r\nexport { SERVER_URL, SERVER_API}","import {SERVER_URL, SERVER_API} from '../../constants';\r\n\r\nasync function getServerMessage() {\r\n  try {\r\n    let response = await fetch(\"https://localhost:3000/welcome\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      }\r\n    });\r\n    console.log(response);\r\n    let responseJSON = await response.json();\r\n    console.log(responseJSON)\r\n    return responseJSON;\r\n} \r\ncatch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function signin(username, password){\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNIN, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status !== 200 && response.ok === false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function signup(username, password) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNUP, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status != 200 && response.ok == false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport { signin, signup }","import React, { Component } from 'react';\nimport { ContextProvider } from \"./js/context\";\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Signin from \"./js/components/Signin\";\nimport Signup from './js/components/Signup';\nimport AuthRoute from \"./js/components/AuthRoute\";\nimport Game from \"./js/components/Game\";\n\nimport { signin, signup } from './js/components/API/account';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Hello from context store\",\n      errorMsg: \"\",\n      token: \"\",\n      username: \"\",\n      password: \"\",\n      user: null//the user info object\n    };\n    this.toggleLoading = this.toggleLoading.bind(this);\n    this.signin = this.signin.bind(this);\n    this.signup = this.signup.bind(this);\n    this.validate = this.validate.bind(this);\n    this.handleInputUsername = this.handleInputUsername.bind(this);\n    this.handleInputPassword = this.handleInputPassword.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n  }\n\n  handleInputUsername(event) {\n    this.setState({ username: event.target.value });\n  }\n\n  handleInputPassword(event) {\n    this.setState({ password: event.target.value });\n  }\n  setErrorMessage(message) {\n    this.setState({ errorMsg: message });\n  }\n\n  async signin() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    try {\n      if (!this.validate()) {\n        this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n        return;\n      }\n\n      //message will probably be a token, save it\n      let response = await signin(this.state.username, this.state.password);\n      this.setState({\n        token: response.token,\n        user: response.user\n      });\n\n    } catch (error) {\n      this.setErrorMessage(error.message);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async signup() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    try {\n      if (!this.validate()) {\n        this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n        return;\n      }\n\n      //message will probably be a token, save it\n      let response = await signup(this.state.username, this.state.password);\n      this.setState({\n        token: response.token,\n        user: response.user\n      });\n\n    } catch (error) {\n      this.setErrorMessage(error.message);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  validate() {\n    const { username, password } = this.state;\n\n    //validate, if valid, send to server\n    if (username.length > 50 || password.length > 50) {\n      return false; //alert(\"Email or password is invalid. Please try again.\");\n    }\n    else return true;\n  }\n\n\n  toggleLoading() {\n    //toggle the spinning icon \n  }\n  render() {\n    const { errorMsg, username, password, user, token } = this.state;\n    const isSignedIn = user !== null && token !== \"\";\n    return (\n      <BrowserRouter>\n        <ContextProvider value={this.state}>\n          <div className=\"App container d-flex h-100\">\n            <div className=\"row error-message\">\n              {errorMsg ? errorMsg : null}\n\n            </div>\n            <Switch>\n              <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/signup\">\n                <Signup signup={this.signup} handleInputUsername={this.handleInputUsername}\n                  handleInputPassword={this.handleInputPassword}\n                  username={username} password={password}/>\n              </AuthRoute>\n              \n              <AuthRoute isSignedIn={isSignedIn} type=\"private\" path=\"/game\">\n                <Game />\n              </AuthRoute>\n\n              <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/\">\n                <Signin signin={this.signin} handleInputUsername={this.handleInputUsername}\n                  handleInputPassword={this.handleInputPassword}\n                  username={username} password={password}/>\n              </AuthRoute>\n\n              \n            </Switch>\n          </div>\n        </ContextProvider>\n      </BrowserRouter>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}