{"version":3,"sources":["js/context.js","js/components/Signin.js","js/components/Signup.js","js/components/AuthRoute.js","js/components/lib/card.js/cards.js","js/components/API/game.js","js/components/GameHandler.js","js/components/Game.js","js/components/Default.js","js/constants.js","js/components/API/account.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","ContextProvider","props","Provider","value","this","children","Component","ContextConsumer","Consumer","Signin","handleInputUsername","handleInputPassword","username","password","signin","signingIn","e","preventDefault","className","htmlFor","maxLength","type","name","onChange","onClick","to","Signup","signup","signingUp","minLength","AuthRoute","isSignedIn","cards","opt","cardSize","width","height","padding","animationSpeed","table","cardback","acesHigh","cardsUrl","blackJoker","redJoker","loop","zIndexCounter","all","start","end","mouseEvent","ev","card","$","data","container","handler","_click","func","call","context","window","shuffle","deck","i","length","j","Math","floor","random","tempi","tempj","Card","suit","rank","init","Container","Deck","options","Hand","Pile","prototype","shortName","toUpperCase","faceUp","el","css","position","cursor","addClass","appendTo","showCard","moveToFront","resize","size","toString","moveTo","x","y","speed","callback","top","left","animate","rotate","angle","xpos","ypos","hideCard","Array","extend","obj","prop","addCard","addCards","removeCard","push","splice","click","mousedown","_mousedown","mouseup","_mouseup","render","calcPosition","parseInt","targetTop","targetLeft","queue","immediate","me","flip","setTimeout","topCard","round","deal","count","hands","totalCount","dealOne","forEach","index","sort","temp","dealCounter","hasOwnProperty","l","on","getFakeCards","SIZE","requestJoin","code","userToken","a","fetch","encodeURIComponent","method","headers","Accept","Authorization","response","json","responseJSON","status","message","gameHandler","JSON","parse","console","log","cmd","dealing","draw","discard","moveMeldToPile","moveCardToMeld","declareWinner","setErrorMessage","Game","state","isMelding","isAddingToMeld","isWaiting","isDrawing","isDiscarding","hasDrawn","hasDiscarded","tableName","myhand","ophand","discardPile","meldPile","currentMeld","currentSelectedCardHand","currentSelectedCardDeck","currentSelectedCardDiscard","currentSelectedMeld","token","hint","hasGameEnded","winner","gamedraw","score","lobbycode","handRef","createRef","startGame","bind","handleMeld","handleAddToMeld","cancelMeldOrAddToMeld","sortHand","setGameState","joinGameWithCode","sendWSData","setHint","handleLobbyCode","setState","target","hide","meld","websocket","onopen","event","Cards","onmessage","addEventListener","close","lobby","send","stringify","joinResponse","hasGameStarted","cardToDiscard","player","find","cardVal","stateToSet","addtionalStates","cardToDraw","from","pop","stopPropagation","test","startingGame","self","cardToAdd","cardInd","opcards","melds","meldArr","newMeld","myturn","drawPhase","cardToMoveToMeld","meldToAdd","meldId","id","alert","validMeld","abs","map","meldToMove","isCurrentMeldValid","some","disableAddToMeldButton","style","display","placeholder","Fragment","location","reload","disabled","Default","SERVER_URL","SERVER_API","body","ok","Error","err","checkSession","sessionToken","success","App","errorMsg","user","isFinishedLoading","toggleLoading","validateUsernamePassword","serverWebsocketURL","process","WSS","localstate","localStorage","getItem","clear","WebSocket","isLoading","setItem","path","exact","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bcb930c3.chunk.js","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\n/**\r\n * COntext is used to store the state of the application and pass it down\r\n * to components, using ContextConsumer\r\n *\r\n * @class ContextProvider\r\n * @extends {Component}\r\n */\r\nclass ContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={{\r\n        ...this.props.value\r\n      }}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ContextConsumer = AppContext.Consumer;\r\nexport { ContextProvider, ContextConsumer };","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nconst Signin = ({ handleInputUsername, handleInputPassword, username, password, signin }) => {\r\n  const signingIn = (e) => {\r\n    e.preventDefault();\r\n    signin();\r\n  }\r\n  return (\r\n    <ContextConsumer>\r\n      {value =>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <h1>Welcome to Rummy</h1>\r\n          </div>\r\n          <div className=\"row\">\r\n            <h2>Signin</h2>\r\n          </div>\r\n          <div className=\"row\">\r\n            <form>\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Username: &nbsp;\r\n                    <input  maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                    onChange={handleInputUsername} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row w-100\">\r\n                <label htmlFor=\"username\">\r\n                  Password: &nbsp;\r\n                  <input  maxLength={50} type=\"password\" name=\"password\" value={password}\r\n                    onChange={handleInputPassword} />\r\n                </label>\r\n                <br />\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <input type=\"submit\" value=\"Signin\" onClick={signingIn} />\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div>\r\n            <br />\r\n            <br />\r\n            <h4>Don't have an account yet?</h4>\r\n            <Link to=\"/signup\">Click here</Link>\r\n          </div>\r\n        </div>\r\n      }\r\n    </ContextConsumer>\r\n  );\r\n};\r\nexport default Signin;","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst Signup = ({ handleInputUsername, handleInputPassword, username, password, signup }) => {\r\n  const signingUp = (e) => {\r\n    e.preventDefault();\r\n    signup();\r\n  }\r\n    return (\r\n      <ContextConsumer>\r\n        {value =>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <h1>Welcome to Rummy</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n              <h2>Signup</h2>\r\n            </div>\r\n            <div className=\"row\">\r\n              <form>\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Username: &nbsp;\r\n                    <input minLength={3} maxLength={50} type=\"text\" name=\"username\" value={username}\r\n                      onChange={handleInputUsername} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row w-100\">\r\n                  <label htmlFor=\"username\">\r\n                    Password: &nbsp;\r\n                  <input minLength={8} maxLength={20} type=\"password\" name=\"password\" value={password}\r\n                      onChange={handleInputPassword} />\r\n                  </label>\r\n                  <br />\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <input type=\"submit\" value=\"Signup\" onClick={signingUp}/>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div>\r\n              <br />\r\n              <br />\r\n              <h4>Already have an account?</h4>\r\n              <Link to=\"/\">Click here</Link>\r\n            </div>\r\n          </div>\r\n        }\r\n      </ContextConsumer>\r\n      )\r\n}\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\n//HOC to redirect user to game if authenticated, to signin if not\r\nconst AuthRoute = props => {\r\n  const { isSignedIn, type } = props;\r\n  if (type === \"guest\" && isSignedIn) return <Redirect to=\"/game\" />;\r\n  else if (type === \"private\" && !isSignedIn) return <Redirect to=\"/\" />;\r\n\r\n  return <Route {...props} >\r\n  </Route>;\r\n};\r\n\r\nexport default AuthRoute;","import $ from \"jquery\";\r\n\r\nconst STANDARD = 0;\r\n\r\nvar cards = function() {\r\n  //The global options\r\n  var opt = {\r\n    cardSize: {\r\n      width: 69,\r\n      height: 94,\r\n      padding: 18\r\n    },\r\n    animationSpeed: 100,\r\n    table: 'body',\r\n    cardback: 'red',\r\n    acesHigh: false,\r\n    cardsUrl: 'img/cards.png',\r\n    blackJoker: false,\r\n    redJoker: false,\r\n    type: STANDARD,\r\n    loop: 1\r\n  };\r\n  var zIndexCounter = 1;\r\n  var all = []; //All the cards created.\r\n  var start = 1;\r\n  var end = start + 12;\r\n\r\n  function mouseEvent(ev) {\r\n    var card = $(this).data('card');\r\n    if (card.container) {\r\n      var handler = card.container._click;\r\n      if (handler) {\r\n        handler.func.call(handler.context || window, card, ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getFakeCards() {\r\n    return new Card('bj', 0, opt.table);\r\n  }\r\n  function init(options) {\r\n    if (options) {\r\n      for (var i in options) {\r\n        if (opt.hasOwnProperty(i)) {\r\n          opt[i] = options[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    opt.acesHigh = false;\r\n    start = opt.acesHigh ? 2 : 1;\r\n    end = start + 12;\r\n\r\n\r\n    opt.table = $(opt.table)[0];\r\n    if ($(opt.table).css('position') == 'static') {\r\n      $(opt.table).css('position', 'relative');\r\n    }\r\n    for (let l = 0; l < opt.loop; l++)\r\n      for (var i = start; i <= end; i++) {\r\n        all.push(new Card('c', i, opt.table));\r\n        all.push(new Card('d', i, opt.table));\r\n        all.push(new Card('h', i, opt.table));\r\n        all.push(new Card('s', i, opt.table));\r\n      }\r\n    if (opt.blackJoker) {\r\n      all.push(new Card('bj', 0, opt.table));\r\n    }\r\n    if (opt.redJoker) {\r\n      all.push(new Card('rj', 0, opt.table));\r\n    }\r\n    \r\n    $('.card').on(\"click\", mouseEvent);\r\n    shuffle(all);\r\n  }\r\n\r\n  function shuffle(deck) {\r\n    //Fisher yates shuffle\r\n    var i = deck.length;\r\n    if (i == 0) return;\r\n    while (--i) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var tempi = deck[i];\r\n      var tempj = deck[j];\r\n      deck[i] = tempj;\r\n      deck[j] = tempi;\r\n    }\r\n  }\r\n\r\n  function Card(suit, rank, table) {\r\n    this.init(suit, rank, table);\r\n  }\r\n\r\n  Card.prototype = {\r\n    init: function(suit, rank, table) {\r\n      this.shortName = suit + rank;\r\n      this.suit = suit;\r\n      this.rank = rank;\r\n      this.name = suit.toUpperCase() + rank;\r\n      this.faceUp = false;\r\n      this.el = $('<div/>').css({\r\n        width: opt.cardSize.width,\r\n        height: opt.cardSize.height,\r\n        \"background-image\": 'url(' + opt.cardsUrl + ')',\r\n        position: 'absolute',\r\n        cursor: 'pointer'\r\n      }).addClass('card').data('card', this).appendTo($(table));\r\n      this.showCard();\r\n      this.moveToFront();\r\n    },\r\n\r\n    resize: function (size) {\r\n      switch (size) {\r\n        case \"small\":\r\n          $(this.el).css({\r\n            width: 20,\r\n            height: 47\r\n          })\r\n          break;\r\n\r\n        case \"default\":\r\n          $(this.el).css({\r\n            width: opt.cardSize.width,\r\n            height: opt.cardSize.height\r\n          })\r\n          break;\r\n        default:\r\n\r\n          break;\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return this.name;\r\n    },\r\n\r\n    moveTo: function(x, y, speed, callback) {\r\n      var props = {\r\n        top: y - (opt.cardSize.height / 2),\r\n        left: x - (opt.cardSize.width / 2)\r\n      };\r\n      $(this.el).animate(props, speed || opt.animationSpeed, callback);\r\n    },\r\n\r\n    rotate: function(angle) {\r\n      $(this.el)\r\n        .css('-webkit-transform', 'rotate(' + angle + 'deg)')\r\n        .css('-moz-transform', 'rotate(' + angle + 'deg)')\r\n        .css('-ms-transform', 'rotate(' + angle + 'deg)')\r\n        .css('transform', 'rotate(' + angle + 'deg)')\r\n        .css('-o-transform', 'rotate(' + angle + 'deg)');\r\n    },\r\n\r\n    showCard: function() {\r\n      var offsets = {\r\n        \"c\": 0,\r\n        \"d\": 1,\r\n        \"h\": 2,\r\n        \"s\": 3,\r\n        \"rj\": 2,\r\n        \"bj\": 3\r\n      };\r\n      var xpos, ypos;\r\n      var rank = this.rank;\r\n      if (rank == 14) {\r\n        rank = 1; //Aces high must work as well.\r\n      }\r\n      xpos = -rank * opt.cardSize.width;\r\n      ypos = -offsets[this.suit] * opt.cardSize.height;\r\n      this.rotate(0);\r\n      $(this.el).css('background-position', xpos + 'px ' + ypos + 'px');\r\n    },\r\n\r\n    hideCard: function(position) {\r\n      var y = opt.cardback == 'red' ? 0 * opt.cardSize.height : -1 * opt.cardSize.height;\r\n      $(this.el).css('background-position', '0px ' + y + 'px');\r\n      this.rotate(0);\r\n    },\r\n\r\n    moveToFront: function() {\r\n      $(this.el).css('z-index', zIndexCounter++);\r\n    }\r\n  };\r\n\r\n  function Container() {\r\n\r\n  }\r\n\r\n  Container.prototype = new Array();\r\n  Container.prototype.extend = function(obj) {\r\n    for (var prop in obj) {\r\n      this[prop] = obj[prop];\r\n    }\r\n  }\r\n  Container.prototype.extend({\r\n    addCard: function(card) {\r\n      this.addCards([card]);\r\n    },\r\n\r\n    addCards: function(cards) {\r\n      for (var i = 0; i < cards.length; i++) {\r\n        var card = cards[i];\r\n        if (card.container) {\r\n          card.container.removeCard(card);\r\n        }\r\n        this.push(card);\r\n        card.container = this;\r\n      }\r\n    },\r\n\r\n    removeCard: function(card) {\r\n      for (var i = 0; i < this.length; i++) {\r\n        if (this[i] == card) {\r\n          this.splice(i, 1);\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    init: function(options) {\r\n      options = options || {};\r\n      this.x = options.x || $(opt.table).width() / 2;\r\n      this.y = options.y || $(opt.table).height() / 2;\r\n      this.faceUp = options.faceUp;\r\n    },\r\n\r\n    click: function(func, context) {\r\n      this._click = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    mousedown: function(func, context) {\r\n      this._mousedown = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    mouseup: function(func, context) {\r\n      this._mouseup = {\r\n        func: func,\r\n        context: context\r\n      };\r\n    },\r\n\r\n    render: function(options) {\r\n      options = options || {};\r\n      var speed = options.speed || opt.animationSpeed;\r\n      this.calcPosition(options);\r\n      for (var i = 0; i < this.length; i++) {\r\n        var card = this[i];\r\n        zIndexCounter++;\r\n        card.moveToFront();\r\n        var top = parseInt($(card.el).css('top'));\r\n        var left = parseInt($(card.el).css('left'));\r\n        if (top != card.targetTop || left != card.targetLeft) {\r\n          var props = {\r\n            top: card.targetTop,\r\n            left: card.targetLeft,\r\n            queue: false\r\n          };\r\n          if (options.immediate) {\r\n            $(card.el).css(props);\r\n          } else {\r\n            $(card.el).animate(props, speed);\r\n          }\r\n        }\r\n      }\r\n      var me = this;\r\n      var flip = function() {\r\n        for (var i = 0; i < me.length; i++) {\r\n          if (me.faceUp) {\r\n            me[i].showCard();\r\n          } else {\r\n            me[i].hideCard();\r\n          }\r\n        }\r\n      }\r\n      if (options.immediate) {\r\n        flip();\r\n      } else {\r\n        setTimeout(flip, speed / 2);\r\n      }\r\n\r\n      if (options.callback) {\r\n        setTimeout(options.callback, speed);\r\n      }\r\n    },\r\n\r\n    topCard: function() {\r\n      return this[this.length - 1];\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Container';\r\n    }\r\n  });\r\n\r\n  function Deck(options) {\r\n    this.init(options);\r\n  }\r\n\r\n  Deck.prototype = new Container();\r\n  Deck.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n      var left = Math.round(this.x - opt.cardSize.width / 2, 0);\r\n      var top = Math.round(this.y - opt.cardSize.height / 2, 0);\r\n      var condenseCount = 6;\r\n      for (var i = 0; i < this.length; i++) {\r\n        if (i > 0 && i % condenseCount == 0) {\r\n          top -= 1;\r\n          left -= 1;\r\n        }\r\n        this[i].targetTop = top;\r\n        this[i].targetLeft = left;\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Deck';\r\n    },\r\n\r\n    deal: function(count, hands, speed, callback) {\r\n      var me = this;\r\n      var i = 0;\r\n      var totalCount = count * hands.length;\r\n\r\n      function dealOne() {\r\n        if (me.length == 0 || i == totalCount) {\r\n          if (callback) {\r\n            callback();\r\n          }\r\n          return;\r\n        }\r\n        hands[i % hands.length].addCard(me.topCard());\r\n        hands[i % hands.length].render({\r\n          callback: dealOne,\r\n          speed: speed\r\n        });\r\n        i++;\r\n      }\r\n      dealOne();\r\n    }\r\n  });\r\n\r\n  function Hand(options) {\r\n    this.init(options);\r\n  }\r\n  Hand.prototype = new Container();\r\n  Hand.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n      var width = opt.cardSize.width + (this.length - 1) * opt.cardSize.padding;\r\n      var left = Math.round(this.x - width / 2);\r\n      var top = Math.round(this.y - opt.cardSize.height / 2, 0);\r\n      for (var i = 0; i < this.length; i++) {\r\n        this[i].targetTop = top;\r\n        this[i].targetLeft = left + i * opt.cardSize.padding;\r\n      }\r\n    },\r\n    resize: function (size) {\r\n      switch (size) {\r\n        case \"small\":\r\n          this.forEach((card, index) => {\r\n            card.resize(\"small\");\r\n          });\r\n          break;\r\n        case \"default\":\r\n          this.forEach((card, index) => {\r\n            card.resize(\"default\");\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n\r\n    sort: function () {\r\n      for (var i=0; i<this.length-1; i++ ){\r\n        for (var j = 0; j < this.length - i - 1; j++)\r\n          if (this[j].suit < this[j+1].suit ||\r\n            (this[j].suit == this[j + 1].suit && this[j].rank > this[j + 1].rank)){\r\n              var temp = this[j];\r\n              this[j] = this[j + 1];\r\n              this[j + 1] = temp; \r\n            }\r\n      }\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Hand';\r\n    }\r\n\r\n  });\r\n\r\n  function Pile(options) {\r\n    this.init(options);\r\n  }\r\n\r\n  Pile.prototype = new Container();\r\n  Pile.prototype.extend({\r\n    calcPosition: function(options) {\r\n      options = options || {};\r\n    },\r\n\r\n    toString: function() {\r\n      return 'Pile';\r\n    },\r\n\r\n    deal: function(count, hands) {\r\n      if (!this.dealCounter) {\r\n        this.dealCounter = count * hands.length;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return {\r\n    init: init,\r\n    all: all,\r\n    getFakeCards: getFakeCards,\r\n    options: opt,\r\n    SIZE: opt.cardSize,\r\n    Card: Card,\r\n    Container: Container,\r\n    Deck: Deck,\r\n    Hand: Hand,\r\n    Pile: Pile,\r\n    shuffle: shuffle\r\n  };\r\n};\r\n\r\nexport default cards;\r\n","async function requestJoin(code, userToken) {\r\n  try {\r\n    let response = await fetch(\"https://localhost:3000/join/\" + encodeURIComponent(code) , {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        Authorization: \"Bearer \" + userToken\r\n      }\r\n    });\r\n    let responseJSON = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw responseJSON.message;\r\n    } \r\n\r\n    return responseJSON;\r\n  }\r\n  catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport { requestJoin }","\r\n\r\n//handle what happens when a cmd is received from the server\r\n//this refers to game.js\r\n//split up to avoid 1000s of lines of code\r\nfunction gameHandler(message){\r\n  let data = JSON.parse(message.data);\r\n  console.log(\"data from server\", data);\r\n\r\n  //initial setup with deck, discardPile and my hand\r\n  if (data.cmd === \"cards\") {\r\n    //setstate deck, discardPile, hand, op's hand\r\n    this.dealing(data);\r\n  } else if (data.cmd == \"draw\") {\r\n    this.draw(data);\r\n  } else if (data.cmd == \"discard\") {\r\n    this.discard(data);\r\n  } else if (data.cmd == \"newmeld\") {\r\n    this.moveMeldToPile(data)\r\n  } else if (data.cmd == \"addmeld\") {\r\n    this.moveCardToMeld(data);\r\n  } else if (data.cmd == \"win\" || data.cmd == \"loss\" || data.cmd == \"gamedraw\") {\r\n    this.declareWinner(data)\r\n  } else if (data.cmd == \"exit\") {\r\n    this.props.setErrorMessage(\"Lobby is full or not available. Please choose another lobby code.\")\r\n  } else if (data.cmd == \"error\") {\r\n    this.props.setErrorMessage(data.message)\r\n  }\r\n}\r\n\r\nexport default gameHandler;","import React, { Component, useRef } from \"react\";\r\n// import Deck from './Cards/lib/deck';\r\nimport Cards from './lib/card.js/cards';\r\nimport $ from 'jquery';\r\n\r\nimport { requestJoin } from \"../components/API/game\";\r\nimport gameHandler from \"./GameHandler\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMelding: false, //(pick 3 cards to meld)\r\n      isAddingToMeld: false, //(add 1 card to 1 of the melds)\r\n      isWaiting: false, //(for server command, other player's turn...)\r\n      isDrawing: false, //(from deck or discard pile)\r\n      isDiscarding: false, //(remove 1 card from hand to discard pile),\r\n      hasDrawn: false,\r\n      hasDiscarded: false,\r\n      cards: null,\r\n      tableName: null,\r\n      deck: null,\r\n      myhand: null,\r\n      ophand: null,\r\n      discardPile: null,\r\n      meldPile: null,\r\n      currentMeld: null,\r\n      currentSelectedCardHand: null,\r\n      currentSelectedCardDeck: null,\r\n      currentSelectedCardDiscard: null,\r\n      currentSelectedMeld: null,\r\n      //the game code to distinguish games, called lobby in server\r\n      code: \"\",\r\n      //randomly generated token from the server\r\n      token: \"\",\r\n      hint: \"\",\r\n      hasGameEnded: false,\r\n      winner: false,\r\n      gamedraw: false,\r\n      score: 0,\r\n      lobbycode: \"\"\r\n    };\r\n\r\n    this.handRef = React.createRef();\r\n    this.startGame = this.startGame.bind(this);\r\n    this.handleMeld = this.handleMeld.bind(this);\r\n    this.handleAddToMeld = this.handleAddToMeld.bind(this);\r\n    this.cancelMeldOrAddToMeld = this.cancelMeldOrAddToMeld.bind(this);\r\n    this.dealing = this.dealing.bind(this);\r\n    this.sortHand = this.sortHand.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n    this.discard = this.discard.bind(this);\r\n    this.setGameState = this.setGameState.bind(this);\r\n    this.joinGameWithCode = this.joinGameWithCode.bind(this);\r\n    this.sendWSData = this.sendWSData.bind(this);\r\n    this.gameHandler = gameHandler.bind(this);\r\n    this.moveMeldToPile = this.moveMeldToPile.bind(this);\r\n    this.setHint = this.setHint.bind(this);\r\n    this.declareWinner = this.declareWinner.bind(this);\r\n    this.handleLobbyCode = this.handleLobbyCode.bind(this);\r\n  }\r\n\r\n  handleLobbyCode(e){\r\n    this.setState({lobbycode: e.target.value});\r\n  }\r\n\r\n  declareWinner(data){\r\n    this.setState({\r\n      hasGameEnded: true,\r\n      winner: data.cmd == \"win\" ? true: false,\r\n      gamedraw: data.cmd == \"gamedraw\" ? true : false,\r\n      score: data.score\r\n    });\r\n    //hide all the cards on the screen\r\n    this.state.cards.all.forEach((card) => $(card.el).hide());\r\n    this.state.ophand.forEach((card) => $(card.el).hide());\r\n    this.state.myhand.forEach((card) => $(card.el).hide());\r\n    this.state.discardPile.forEach((card) => $(card.el).hide());\r\n    this.state.meldPile.forEach(\r\n      (meld => {\r\n        meld.forEach(\r\n          (card) => $(card.el).hide()\r\n        )\r\n      })\r\n      );\r\n  }\r\n\r\n  setHint(message) {\r\n    this.setState({ hint: message });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { websocket } = this.props;\r\n    //setup websocket events\r\n    websocket.onopen = (event) => {\r\n      console.log(\"Connected to server.\");\r\n    };\r\n\r\n    //starting an instance of card.js\r\n    var cards = Cards();\r\n    const tableName = '#card-table';\r\n\r\n    //Tell the library which element to use for the table\r\n    cards.init({ table: tableName });\r\n    this.setState({ cards, tableName });\r\n\r\n    websocket.onmessage = (message) => {\r\n      this.gameHandler(message);\r\n    };\r\n\r\n    window.addEventListener('beforeunload', () => { // Attempts to Close Socket before forced disconnect\r\n      if (websocket) websocket.close();\r\n    });\r\n  }\r\n\r\n  //used to send data to the server, as string\r\n  sendWSData(data) {\r\n    let { websocket, userToken } = this.props;\r\n    // console.log(\"WEBSOCKET\", websocket);\r\n    const { code, token } = this.state;\r\n    //always includes token and game code when sending data\r\n    data.lobby = code;\r\n    data.token = token;\r\n    data.userToken = userToken;\r\n    // Send Data (as string)\r\n    websocket.send(JSON.stringify(data));\r\n  }\r\n\r\n  //setup websocket connection to the server\r\n  async joinGameWithCode(code, userToken) {\r\n    try {\r\n\r\n      //request to join a game with code typed in by user\r\n      let joinResponse = await requestJoin(code, userToken);\r\n\r\n      let token = joinResponse.token;\r\n      console.log(token);\r\n\r\n      this.setState({\r\n        code, token\r\n      });\r\n\r\n      //send request to join a game\r\n      this.sendWSData({ cmd: \"join\" });\r\n\r\n    } catch (error) {\r\n      console.log(\"An error occurs when trying to join: \", error);\r\n      this.props.setErrorMessage(\"An error occurs when trying to join \" + error);\r\n      this.setState({\r\n        hasGameStarted: false\r\n      })\r\n    }\r\n  }\r\n\r\n  discard(data) {\r\n    let { currentSelectedCardHand, isDiscarding, myhand, discardPile, ophand, deck } = this.state;\r\n    let self = this;\r\n    let cardToDiscard = data.card;\r\n\r\n    //if i am discarding the card\r\n    if (data.player == \"me\") {\r\n\r\n      discardPile.addCard(myhand.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n      myhand.removeCard(myhand.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n\r\n      this.setGameState(\"isWaiting\", { hasDiscarded: true, currentSelectedCardHand: null });\r\n    }\r\n    else {\r\n      //the opponent is discarding a card\r\n      //remove the top fake card from ophand, then add the card to discard from deck to ophand\r\n      $(ophand.topCard().el).hide();\r\n      ophand.removeCard(ophand.topCard());\r\n      ophand.addCard(deck.find((cardVal) => cardVal.suit == cardToDiscard.suit && cardVal.rank == cardToDiscard.rank));\r\n\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n      //then place the card from ophand into discard pile\r\n      discardPile.addCard(ophand.topCard());\r\n\r\n      //since the opponent is discarding, it is my turn\r\n      this.setGameState(\"isDrawing\", { hasDiscarded: false, hasDrawn: false });\r\n    }\r\n    ophand.sort();\r\n    myhand.render();\r\n    ophand.render();\r\n    discardPile.render();\r\n    deck.render();\r\n  }\r\n\r\n  setGameState(stateToSet, addtionalStates = {}, callback) {\r\n    let hint = \"\";\r\n    switch (stateToSet) {\r\n      case \"isMelding\":\r\n        hint = \"Please choose 3 cards that have the same rank but different suit, or same suit but in sequence.\";\r\n        break;\r\n      case \"isAddingToMeld\":\r\n        hint = \"Please choose a card, then click on a preexisiting meld that you want to lay off to.\";\r\n        break;\r\n      case \"isWaiting\":\r\n        hint = \"Waiting for other player move.\";\r\n        break;\r\n      case \"isDrawing\":\r\n        hint = \"Please draw a card from the deck or the discard pile.\";\r\n        break;\r\n      case \"isDiscarding\":\r\n        hint = \"Please choose a card from your hand to discard or you can create a meld.\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      isMelding: stateToSet == \"isMelding\" ? true : false, //(pick 3 cards to meld)\r\n      isAddingToMeld: stateToSet == \"isAddingToMeld\" ? true : false, //(add 1 card to 1 of the melds)\r\n      isWaiting: stateToSet == \"isWaiting\" ? true : false, //(for server command, other player's turn...)\r\n      isDrawing: stateToSet == \"isDrawing\" ? true : false, //(from deck or discard pile)\r\n      isDiscarding: stateToSet == \"isDiscarding\" ? true : false, //(remove 1 card from hand to discard pile),\r\n      hint,\r\n      ...addtionalStates\r\n    }, callback);\r\n  }\r\n\r\n  draw(data) {\r\n    let { isDrawing, deck, discardPile, myhand, currentSelectedCardDeck, currentSelectedCardDiscard, ophand, cards } = this.state;\r\n    let self = this;\r\n    //if i am drawing the card\r\n    // if (isDrawing && data.player == \"me\") { isDrawing is not needed anymore since the server will dictate when and where to draw\r\n    if (data.player == \"me\") {\r\n      let cardToDraw = data.card;\r\n      if (data.from == \"deck\") {\r\n        //if draw from deck\r\n        myhand.addCard(deck.find((cardVal) => cardVal.suit == cardToDraw.suit && cardVal.rank == cardToDraw.rank));\r\n\r\n        self.setGameState(\"isDiscarding\", {\r\n          currentSelectedCardDeck: null,\r\n          currentSelectedCardDiscard: null,\r\n          hasDrawn: true\r\n        });\r\n      } else {\r\n        //if draw from discard pile\r\n        myhand.addCard(discardPile.topCard());\r\n\r\n        self.setGameState(\"isDiscarding\", {\r\n          currentSelectedCardDeck: null,\r\n          currentSelectedCardDiscard: null,\r\n          hasDrawn: true\r\n        });\r\n      }\r\n      deck.render();\r\n      myhand.render();\r\n      ophand.render();\r\n      discardPile.render();\r\n    }\r\n    else {\r\n      //the opponent is drawing a card\r\n      if (data.from == \"deck\") {\r\n        //if draw from deck\r\n        deck.addCard(cards.getFakeCards());\r\n        deck.render({ immediate: true });\r\n        ophand.addCard(deck.topCard());\r\n        deck.render();\r\n        myhand.render();\r\n        ophand.render();\r\n        discardPile.render();\r\n      } else {\r\n        //if draw from discard pile\r\n        ophand.addCard(discardPile.topCard());\r\n        ophand.render();\r\n        discardPile.render();\r\n        //do this to make sure ophand contains only fake cards\r\n        deck.addCard(ophand.topCard());\r\n        ophand.addCard(cards.getFakeCards());\r\n        //invisible render\r\n        ophand.render({ immediate: true });\r\n        deck.render({ immediate: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  cancelMeldOrAddToMeld() {\r\n    let { currentMeld, myhand, isMelding, isAddingToMeld } = this.state;\r\n    if (isMelding || isAddingToMeld) {\r\n      //return all cards from currentMeld to myhand\r\n      const length = currentMeld.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let card = currentMeld.pop();\r\n        myhand.addCard(card);\r\n        currentMeld.removeCard(card);\r\n        myhand.render();\r\n        currentMeld.render();\r\n      }\r\n      this.setGameState(\"isDiscarding\", { currentSelectedCardHand: null });\r\n    }\r\n  }\r\n\r\n  sortHand() {\r\n    let { myhand } = this.state;\r\n    myhand.sort();\r\n    myhand.render();\r\n  }\r\n\r\n  startGame(e) {\r\n    if (e) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    let { cards, lobbycode } = this.state;\r\n    this.props.setErrorMessage(\"\");\r\n    let lobbycodeRegex = /^[a-zA-Z0-9]{5,12}$/;\r\n    if (lobbycode == \"\" || !lobbycodeRegex.test(lobbycode)){\r\n      this.props.setErrorMessage(\"Room code must contain between 5 and 12 alphanumeric characters.\");\r\n      return;\r\n    }\r\n\r\n    this.props.startingGame();\r\n\r\n\r\n    //Create a new deck of cards\r\n    var deck = new cards.Deck();\r\n    //By default it's in the middle of the container, put it slightly to the side\r\n    deck.x -= 50;\r\n\r\n    //adding all cards to the deck\r\n    deck.addCards(cards.all);\r\n\r\n    //No animation here, just get the deck onto the table.\r\n    deck.render({ immediate: true });\r\n\r\n    //Now lets create a couple of hands, one face down, one face up.\r\n    var myhand = new cards.Hand({ faceUp: true, y: 340 });\r\n    var ophand = new cards.Hand({ faceUp: false, y: 60 });\r\n\r\n    //Lets add a discard pile\r\n    var discardPile = new cards.Deck({ faceUp: true });\r\n    discardPile.x += 50;\r\n\r\n    var meldPile = [];\r\n\r\n    //this holds the 3 cards that user want to meld\r\n    //set it to slightly overlap the deck\r\n    var currentMeld = new cards.Hand({ faceUp: true, x: deck.x + 20, y: deck.y + 20 });\r\n\r\n    //setup click event, these will simply set the clicked card into state and call relevant event handler\r\n    let self = this;\r\n    myhand.click(function (card) {\r\n      if (self.state.isMelding) {\r\n        self.setState({ currentSelectedCardHand: card }, () => self.handleMeld());\r\n      }\r\n      if (self.state.isDiscarding) {\r\n        self.setState({ currentSelectedCardHand: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"discard\",\r\n            suit: card.suit,\r\n            rank: card.rank\r\n          });\r\n        });\r\n      }\r\n      if (self.state.isAddingToMeld) {\r\n        self.setState({ currentSelectedCardHand: card }, () => self.handleAddToMeld());\r\n      }\r\n    });\r\n\r\n    deck.click(function (card) {\r\n      if (self.state.isDrawing)\r\n        self.setState({ currentSelectedCardDeck: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"draw\",\r\n            from: \"deck\"\r\n          });\r\n\r\n          //this should be called when receiving command\r\n          // self.draw();\r\n        });\r\n\r\n    });\r\n\r\n    discardPile.click(function (card) {\r\n      if (self.state.isDrawing)\r\n        self.setState({ currentSelectedCardDiscard: card }, () => {\r\n          self.sendWSData({\r\n            cmd: \"draw\",\r\n            from: \"discardPile\",\r\n            rank: card.rank,\r\n            suit: card.suit\r\n          });\r\n        });\r\n    });\r\n\r\n    //saving state\r\n    this.setState({\r\n      cards,\r\n      deck,\r\n      myhand,\r\n      ophand,\r\n      discardPile,\r\n      meldPile,\r\n      currentMeld\r\n    });\r\n\r\n    //setup websocket connection and handle it\r\n    this.joinGameWithCode(lobbycode, this.props.userToken);\r\n\r\n  }\r\n\r\n  //setup the initial layout of the table\r\n  dealing(data) {\r\n    //data is from the server\r\n    //this is simply the animation, because the cards dealt is given by the server\r\n    const { cards, discardPile, deck, myhand, ophand, meldPile } = this.state;\r\n\r\n    //adding cards that is in player's hand\r\n    for (let card of data.cards) {\r\n      let cardToAdd = cards.all.find(\r\n        (cardVal, cardInd) => {\r\n          return cardVal.suit == card.suit && cardVal.rank == card.rank;\r\n        }\r\n      );\r\n      myhand.addCard(cardToAdd);\r\n    }\r\n\r\n    //adding cards in the discard pile\r\n    for (let card of data.discardPile) {\r\n      discardPile.addCard(cards.all.find((cardVal, cardInd) => cardVal.suit == card.suit && cardVal.rank == card.rank));\r\n    }\r\n\r\n    //fill ophand with fake cards\r\n    for (let i = 0; i < data.opcards; i++) {\r\n      ophand.addCard(cards.getFakeCards());\r\n    }\r\n\r\n    //adding melds\r\n    for (let meld of data.melds) {\r\n      //adding the cards in the current meld \r\n      let meldArr = [];\r\n      for (let card of meld) {\r\n        let cardToAdd = cards.all.find(\r\n          (cardVal, cardInd) => {\r\n            return cardVal.suit == card.suit && cardVal.rank == card.rank;\r\n          });\r\n        meldArr.push(cardToAdd);\r\n      }\r\n\r\n      let newMeld = new cards.Hand({ faceUp: true, y: 1 });\r\n\r\n      const length = meldArr.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let card = meldArr.pop();\r\n        newMeld.addCard(card);\r\n      }\r\n      newMeld.sort();\r\n      newMeld.x = newMeld.x - 230;\r\n      newMeld.y = newMeld.y + (meldPile.length + 1) * 250 / 5;\r\n\r\n      let self = this;\r\n      newMeld.click(function (card) {\r\n        if (self.state.isAddingToMeld) {\r\n          self.setState({ currentSelectedMeld: newMeld }, () => self.handleAddToMeld());\r\n        }\r\n      });\r\n\r\n      meldPile.push(newMeld);\r\n      newMeld.resize(\"small\");\r\n      newMeld.render();\r\n    }\r\n    //now, render everything\r\n    deck.render();\r\n    discardPile.render();\r\n    myhand.render();\r\n    ophand.render();\r\n\r\n    if (data.myturn) {\r\n      //if it is my turn\r\n      if (data.drawPhase) {\r\n        //drawing stage\r\n        this.setGameState(\"isDrawing\");\r\n      } else {\r\n        this.setGameState(\"isDiscarding\", { hasDrawn: true });\r\n      }\r\n    }\r\n    else {\r\n      this.setGameState(\"isWaiting\");\r\n    }\r\n  }\r\n\r\n  //server has accepted the request to add card to meld, now move the card to meld\r\n  moveCardToMeld(data) {\r\n    let cardToMoveToMeld = data.card;\r\n    let { currentMeld, myhand, ophand, deck, meldPile } = this.state;\r\n    //i am doing the adding\r\n    if (data.player == 'me') {\r\n      let { currentSelectedMeld } = this.state;\r\n      //make sure the card that server says to add is the same that the client request to add\r\n      if (cardToMoveToMeld.rank == currentMeld[0].rank && cardToMoveToMeld.suit == currentMeld[0].suit) {\r\n        // let cardToAddToMeld = currentMeld.pop();\r\n        currentSelectedMeld.addCard(currentMeld.topCard());\r\n        // currentMeld.removeCard(cardToAddToMeld);\r\n      } else {\r\n        //for some reason, the client card and server's card is not the same, ignore client card\r\n\r\n        this.cancelMeldOrAddToMeld();\r\n        //move cards from myhand to the meld that needs adding\r\n\r\n        //the card in local game\r\n        let card = myhand.find((cardVal) => cardVal.rank == cardToMoveToMeld.rank && cardVal.rank == cardToMoveToMeld.rank);\r\n        currentSelectedMeld.addCard(card);\r\n        // myhand.removeCard(card);\r\n      }\r\n      this.setState({ currentSelectedCardHand: null, currentSelectedMeld: null }, () => setTimeout(() => this.setGameState(\"isDiscarding\"), 500));//avoid race condition with myhand.click event\r\n      currentSelectedMeld.sort();\r\n      currentSelectedMeld.resize(\"small\");\r\n      currentSelectedMeld.render();\r\n      currentMeld.render();\r\n      ophand.render();\r\n      myhand.render();\r\n    }\r\n    else {\r\n      //the opponent is doing the adding\r\n      //assume that ophand has only fake cards, any card ophand drew is actually in deck\r\n\r\n      //the card in local game\r\n      let card = deck.find((cardVal) => cardVal.suit == cardToMoveToMeld.suit && cardVal.rank == cardToMoveToMeld.rank);\r\n\r\n      $(ophand.topCard().el).hide();\r\n      ophand.removeCard(ophand.topCard());\r\n      // ophand.render({ immediate: true });\r\n      \r\n      ophand.addCard(card);\r\n      //avoid rendering\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n\r\n      let meldToAdd = meldPile[data.meldId];\r\n      //move cards from ophand to currentSelectedMeld\r\n      meldToAdd.addCard(ophand.topCard());\r\n      // ophand.removeCard(card);\r\n\r\n      //render\r\n      meldToAdd.sort();\r\n      meldToAdd.resize(\"small\");\r\n      meldToAdd.render();\r\n      ophand.render();\r\n    }\r\n  }\r\n\r\n  //handle add a card to meld on client side, if the card is valid then it is sent to server\r\n  handleAddToMeld() {\r\n    let { isAddingToMeld, currentMeld, myhand, currentSelectedCardHand, currentSelectedMeld } = this.state;\r\n    if (isAddingToMeld) {\r\n      //reuse currentMeld to store the card to add\r\n      //in this usage, currentMeld should have only 1 card\r\n      if (currentMeld.length === 0) {\r\n        //no card yet\r\n        currentMeld.addCard(currentSelectedCardHand);\r\n        myhand.removeCard(currentSelectedCardHand);\r\n        currentMeld.sort();\r\n        myhand.render();\r\n        currentMeld.render();\r\n      } else if (currentMeld.length === 1) {\r\n        if (currentSelectedMeld != null) {\r\n          let card = currentMeld[0];//the only card inside currentMeld\r\n          //check if card to add to meld is valid for currentSelectedMeld\r\n          if ((currentSelectedMeld[0].suit === card.suit && currentSelectedMeld[0].rank - 1 === card.rank)\r\n            || (currentSelectedMeld[currentSelectedMeld.length - 1].suit === card.suit && currentSelectedMeld[currentSelectedMeld.length - 1].rank + 1 === card.rank)\r\n            || (currentSelectedMeld[0].suit != card.suit && currentSelectedMeld[0].rank == card.rank \r\n            && currentSelectedMeld[1].rank == card.rank\r\n            && currentSelectedMeld[2].rank == card.rank)\r\n          ) {\r\n            //if the card is same suit and less than 1 from the first card in meld, or greater than 1 from the last card in meld\r\n            this.sendWSData({\r\n              cmd: \"addmeld\",\r\n              card: {\r\n                suit: card.suit,\r\n                rank: card.rank\r\n              },\r\n              meldId: currentSelectedMeld.id\r\n            });\r\n          }\r\n          else alert(\"Cannot add this card into this meld\");\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //this function handles melding process client side only, it does not move cards into the meld pile\r\n  handleMeld() {\r\n    let validMeld = false;\r\n    let { cards, myhand, currentMeld, meldPile } = this.state;\r\n    let card = this.state.currentSelectedCardHand;\r\n\r\n    //if there are less then 3 cards, just add them to currentMeld\r\n    if (currentMeld.length < 2) {\r\n      currentMeld.addCard(card);\r\n      myhand.removeCard(card);\r\n      currentMeld.sort();\r\n      myhand.render();\r\n      currentMeld.render();\r\n    }\r\n    else if (currentMeld.length == 2) {\r\n      //currentMeld has 2 cards already, adding a third will perform a check\r\n      //if check is valid, add cards to the meld pile\r\n      currentMeld.addCard(card);\r\n      myhand.removeCard(card);\r\n      currentMeld.sort();\r\n      //three in a row, same suit\r\n      if (currentMeld[0].suit == currentMeld[1].suit && currentMeld[1].suit == currentMeld[2].suit) {\r\n        if (Math.abs(currentMeld[0].rank - currentMeld[1].rank) == 1\r\n          && Math.abs((currentMeld[1].rank - currentMeld[2].rank)) == 1) {\r\n          validMeld = true;\r\n        }\r\n      }\r\n      else {\r\n        //or three of same rank, diff suit\r\n        if ((currentMeld[0].rank) == currentMeld[1].rank && (currentMeld[1].rank) == currentMeld[2].rank) {\r\n          validMeld = true;\r\n        }\r\n      }\r\n      if (validMeld) {\r\n        //the meld is valid, send a cmd to meld to server\r\n        this.sendWSData({\r\n          cmd: \"newmeld\",\r\n          player: \"me\",\r\n          meld: currentMeld.map((card) => {\r\n            return { suit: card.suit, rank: card.rank };\r\n          })//array with 3 cards\r\n        });\r\n      }\r\n      else {\r\n        alert(\"meld not valid\");\r\n      }\r\n      myhand.render();\r\n      currentMeld.render();\r\n    }\r\n  }\r\n\r\n  moveMeldToPile(data) {\r\n    let { cards, meldPile, currentMeld, myhand, ophand, deck } = this.state;\r\n    let meldToMove = data.meld; //this is the meld given by server; currentMeld is the local meld\r\n    let newMeld = new cards.Hand({ faceUp: true, y: 1 });\r\n\r\n    //i am doing the melding\r\n    if (data.player == 'me') {\r\n      let isCurrentMeldValid = true;\r\n      //make sure the meld that we are moving to the meld pile is the same as the meld the client has chosen\r\n      if (meldToMove.length === currentMeld.length) {\r\n        for (let i = 0; i < meldToMove.length; i++) {\r\n          if (!currentMeld.some((cardVal) => cardVal.rank == meldToMove[i].rank && cardVal.suit == meldToMove[i].suit)) {\r\n            //if a card in meldToMove not exist in currentMeld, then currentMeld is invalid\r\n            isCurrentMeldValid = false;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        isCurrentMeldValid = false;\r\n      }\r\n\r\n      //this should not happen, unless something weird happens with the server or the player cheated somehow\r\n      if (!isCurrentMeldValid) {\r\n        //ignore currentMeld and use meldToMove instead\r\n        //cancel the currentMeld\r\n        this.cancelMeldOrAddToMeld();\r\n        //move cards from myhand to the meldPile\r\n        let length = meldToMove.length;\r\n        for (let i = 0; i < length; i++) {\r\n          let card = myhand.pop();\r\n          newMeld.addCard(card);\r\n          currentMeld.removeCard(card);\r\n        }\r\n      } else {\r\n        //the normal, expected flow\r\n        let length = meldToMove.length;\r\n        for (let i = 0; i < length; i++) {\r\n          let card = currentMeld.pop();\r\n          newMeld.addCard(card);\r\n          currentMeld.removeCard(card);\r\n          //add id of the meld to newMeld, this is useful when adding a card to a meld\r\n        }\r\n      }\r\n      this.setState({ currentSelectedCardHand: null }, () => setTimeout(() => this.setGameState(\"isDiscarding\"), 500));//avoid race condition with myhand.click event\r\n\r\n    }\r\n    //the other player is doing the melding\r\n    else if (data.player == \"op\") {\r\n      //assume that ophand has only fake cards, any card ophand drew is actually in deck\r\n\r\n      //remove 3 cards from ophand\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        $(ophand.topCard().el).hide()\r\n        ophand.removeCard(ophand.topCard());\r\n        ophand.render({ immediate: true });\r\n      }\r\n\r\n      //add cards from deck to ophand\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        ophand.addCard(deck.find((cardVal) => cardVal.suit == meldToMove[i].suit && cardVal.rank == meldToMove[i].rank));\r\n      }\r\n      //avoid rendering\r\n      ophand.render({ immediate: true });\r\n      deck.render({ immediate: true });\r\n\r\n      //move cards from ophand to newMeld\r\n      for (let i = 0; i < meldToMove.length; i++) {\r\n        newMeld.addCard(ophand.topCard());\r\n      }\r\n    }\r\n    //sort the card without rendering\r\n    newMeld.sort();\r\n    newMeld.render({ immediate: true });\r\n\r\n    newMeld.x = newMeld.x - 230;\r\n    newMeld.y = newMeld.y + (meldPile.length + 1) * 250 / 5;\r\n\r\n    let self = this;\r\n    newMeld.id = data.meldId;\r\n    newMeld.click(function (card) {\r\n      if (self.state.isAddingToMeld) {\r\n        self.setState({ currentSelectedMeld: newMeld }, () => self.handleAddToMeld());\r\n      }\r\n    });\r\n\r\n    meldPile.push(newMeld);\r\n    newMeld.resize(\"small\");\r\n    newMeld.render();\r\n    currentMeld.render();\r\n  }\r\n\r\n  render() {\r\n    const { hasGameStarted } = this.props;\r\n    const { isMelding, hasDiscarded, hasDrawn, isWaiting, isAddingToMeld, hint, winner, gamedraw, score, hasGameEnded, lobbycode } = this.state;\r\n    const disableAddToMeldButton = () => {\r\n      if (isWaiting) {\r\n        return true;\r\n      } else if (isMelding || isAddingToMeld) {\r\n        //or melding/AddToMeld is in progress\r\n        return true;\r\n      }\r\n      else if (hasDrawn && !hasDiscarded) {\r\n        //if user has drawn a card but has not discard a card yet\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    const handref = <div id=\"hand\" ref={this.handRef} />;\r\n    return (\r\n      <div>\r\n        <p>Welcome to the game</p>\r\n        <div id=\"hint\">\r\n          {hasGameStarted && !hasGameEnded ? hint : null}\r\n        </div>\r\n        <div id=\"lobbycode\">\r\n          <label style={{ display: !hasGameStarted ? \"inline\" : \"none\" }}>Enter a room code (must contains between 5 and 12 alphanumeric characters): &nbsp;&nbsp;\r\n          <input style={{ display: !hasGameStarted ? \"inline\" : \"none\" }}\r\n              value={lobbycode} onChange={this.handleLobbyCode}\r\n              type=\"text\" placeholder=\"Room code\" />\r\n          </label>\r\n        </div>\r\n\r\n        <button id=\"start-btn\" style={{ display: !hasGameStarted ? \"block\" : \"none\" }}\r\n          onClick={this.startGame}>Start the game</button>\r\n        {\r\n          hasGameEnded ? \r\n            <div id=\"game-winner\">\r\n              {gamedraw ? \r\n                <h1>The deck is out of cards. The game is a draw.</h1>\r\n                :\r\n                <React.Fragment>\r\n                  <h1>{winner ? \"You have won\" : \"You have lost\"}</h1>\r\n                  <h2>{winner ? \"Your score: \" : \"Your opponent score: \"} {score}</h2>\r\n                </React.Fragment>\r\n              }\r\n              \r\n              <button id=\"replay\" onClick={() => window.location.reload()}>Play another game</button>\r\n            </div>\r\n            : \r\n            <div id=\"card-table\">\r\n              <button disabled={disableAddToMeldButton()} style={{ display: hasGameStarted ? \"block\" : \"none\" }}\r\n                id=\"meld\"\r\n                onClick={() => this.setGameState(\"isMelding\")}\r\n              >Meld</button>\r\n\r\n              <button disabled={disableAddToMeldButton()} style={{ display: hasGameStarted ? \"block\" : \"none\" }}\r\n                id=\"addtomeld\"\r\n                onClick={() => this.setGameState(\"isAddingToMeld\")}\r\n              >Add to meld</button>\r\n\r\n              <button style={{ display: hasGameStarted & (isMelding || isAddingToMeld) ? \"block\" : \"none\" }}\r\n                id=\"cancel-meld\" onClick={this.cancelMeldOrAddToMeld}\r\n              >Cancel</button>\r\n\r\n              <button style={{ display: hasGameStarted ? \"block\" : \"none\" }}\r\n                id=\"sort-hand\" onClick={this.sortHand}\r\n              >Sort hand</button>\r\n            </div>\r\n        }\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { ContextConsumer } from '../context';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst Default = ({ handleInputUsername, handleInputPassword, username, password, signin }) => {\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <h1>404 not found</h1>\r\n        <Link to=\"/\">Back to main page</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Default;","const SERVER_URL = \"https://localhost:3000\";\r\n\r\nconst SERVER_API = {\r\n  SIGNIN: \"/user/signin\",\r\n  SIGNUP: \"/user/signup\",\r\n  SIGNOUT: \"/signout\",\r\n  TOKENCHECK: \"/user/checkJWTToken\"\r\n}\r\n\r\nexport { SERVER_URL, SERVER_API}","import {SERVER_URL, SERVER_API} from '../../constants';\r\n\r\nasync function getServerMessage() {\r\n  try {\r\n    let response = await fetch(\"https://localhost:3000/welcome\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      }\r\n    });\r\n    console.log(response);\r\n    let responseJSON = await response.json();\r\n    console.log(responseJSON)\r\n    return responseJSON;\r\n} \r\ncatch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function signin(username, password){\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNIN, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status !== 200 && response.ok === false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function signup(username, password) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.SIGNUP, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (response.status != 200 && response.ok == false) {\r\n      throw new Error(responseJSON.err.message);\r\n    } else {\r\n      return responseJSON;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function checkSession(sessionToken) {\r\n  try {\r\n    let response = await fetch(SERVER_URL + SERVER_API.TOKENCHECK, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        Authorization: \"Bearer \" + sessionToken\r\n      }\r\n    });\r\n    let responseJSON = await response.json();\r\n    if (responseJSON.success == false && responseJSON.status == \"JWT invalid\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport { signin, signup, checkSession }","import React, { Component } from 'react';\nimport { ContextProvider } from \"./js/context\";\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Signin from \"./js/components/Signin\";\nimport Signup from './js/components/Signup';\nimport AuthRoute from \"./js/components/AuthRoute\";\nimport Game from \"./js/components/Game\";\nimport DefaultRoute from \"./js/components/Default\";\n\nimport { signin, signup, checkSession } from './js/components/API/account';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Hello from context store\",\n      errorMsg: \"\",\n      username: \"\",\n      password: \"\",\n      user: \"\",\n      userToken: \"\",\n      hasGameStarted: false,\n      websocket: null,\n      isFinishedLoading: false\n    };\n    this.toggleLoading = this.toggleLoading.bind(this);\n    this.signin = this.signin.bind(this);\n    this.signup = this.signup.bind(this);\n    this.handleInputUsername = this.handleInputUsername.bind(this);\n    this.handleInputPassword = this.handleInputPassword.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n    this.startingGame = this.startingGame.bind(this);\n    this.validateUsernamePassword = this.validateUsernamePassword.bind(this);\n\n  } \n\n  async componentDidMount() {\n    \n    //setup websocket\n    let serverWebsocketURL = process.env.WSS || \"wss://localhost:3000\";\n    // this.setState({ websocket: new WebSocket(serverWebsocketURL) });\n\n    try {\n      //check if game state still valid\n      let localstate = JSON.parse(localStorage.getItem(\"appState\"));\n      console.log(\"localstate\", localstate);\n      if (localstate) {\n        //if local game state exist\n        //assume that local game state only exist if the user has signin/signup before\n        let isUserTokenValid = await checkSession(localstate.userToken);\n        if (isUserTokenValid) {\n          this.setState({\n            user: localstate.user,\n            username: localstate.username,\n            userToken: localstate.userToken\n          });\n        }\n        else {\n          //token is no longer valid, delete localStorage\n          localStorage.clear();\n        }\n\n      }\n      this.setState({\n        isFinishedLoading: true,\n        websocket: new WebSocket(serverWebsocketURL)\n      });\n\n    } catch (error) {\n      console.log(error);\n      this.setState({\n        isFinishedLoading: true,\n        errorMsg: \"Cannot check user's token. Please signin again.\"\n      });\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (this.state.websocket) {\n      this.state.websocket.close();\n    }\n  }\n\n  startingGame() {\n    //assume user has signin or signup\n    this.setState({\n      hasGameStarted: true\n    });\n\n  }\n  handleInputUsername(event) {\n    this.setState({ username: event.target.value });\n  }\n\n  handleInputPassword(event) {\n    this.setState({ password: event.target.value });\n  }\n  setErrorMessage(message) {\n    // throw Error(message);\n    this.setState({ errorMsg: message });\n  }\n\n  validateUsernamePassword(){\n    const {username, password} = this.state;\n    //username length must be between 3 and 50\n    if (username.length < 3 || username.length >50 ){\n      this.setErrorMessage(\"Username must be between 3 and 50 characters.\")\n      return false;\n    }\n    let passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&_])[A-Za-z\\d@$!%*?&_]{8,20}$/;\n    if (!passwordRegex.test(password)){\n      this.setErrorMessage(\"Password must have a minimum of 8 and a maximum of 20 characters, at least one uppercase letter, one lowercase letter, one number and one special character (@$!%*?&_).\");\n      return false;\n    }\n    return true;\n\n  }\n  async signin() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    if (this.validateUsernamePassword()) {\n      try {\n        //message will be a userToken, save it\n        let response = await signin(this.state.username, this.state.password);\n        this.setState({\n          userToken: response.token,\n          user: response.user\n        });\n\n        //save user's info\n        localStorage.setItem(\"appState\", JSON.stringify({\n          username: this.state.username,\n          user: this.state.user,\n          userToken: this.state.userToken,\n        }));\n\n\n      } catch (error) {\n        this.setErrorMessage(error.message);\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    }\n    else {\n      this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n    }\n  }\n\n  async signup() {\n    this.setState({ isLoading: true, errorMsg: \"\" });\n    if (this.validateUsernamePassword()){\n      try {\n        //message will be a userToken, save it\n        let response = await signup(this.state.username, this.state.password);\n\n        this.setState({\n          userToken: response.token,\n          user: response.user,\n        });\n\n        //save user's info\n        localStorage.setItem(\"appState\", JSON.stringify({\n          username: this.state.username,\n          user: this.state.user,\n          userToken: this.state.userToken,\n        }));\n\n      } catch (error) {\n        this.setErrorMessage(error.message);\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    }\n    else {\n      this.setErrorMessage(\"Username or password is invalid. Please try again.\");\n    }\n  }\n\n  toggleLoading() {\n    //toggle the spinning icon \n  }\n  render() {\n    const { errorMsg, username, password, user, userToken, hasGameStarted, websocket, isFinishedLoading } = this.state;\n    const isSignedIn = user !== null && userToken !== \"\";\n    return (\n      <BrowserRouter>\n        <ContextProvider value={this.state}>\n          <div className=\"App\">\n            {\n              isFinishedLoading ?\n                <div>\n                  <div className=\"error-message\">\n                    {errorMsg ? errorMsg : null}\n\n                  </div>\n                  <Switch>\n                    <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/signup\">\n                      <Signup signup={this.signup} handleInputUsername={this.handleInputUsername}\n                        handleInputPassword={this.handleInputPassword}\n                        username={username} password={password} />\n                    </AuthRoute>\n\n                    {websocket != null ?\n                      <AuthRoute isSignedIn={isSignedIn} type=\"private\" path=\"/game\">\n                        <Game hasGameStarted={hasGameStarted}\n                          startingGame={this.startingGame}\n                          setErrorMessage={this.setErrorMessage}\n                          websocket={websocket}\n                          userToken={userToken}\n                        />\n                      </AuthRoute>\n                      : null\n                    }\n\n                    <AuthRoute isSignedIn={isSignedIn} type=\"guest\" path=\"/\" exact>\n                      <Signin signin={this.signin} handleInputUsername={this.handleInputUsername}\n                        handleInputPassword={this.handleInputPassword}\n                        username={username} password={password} />\n                    </AuthRoute>\n\n                    <DefaultRoute/>\n                  </Switch>\n                </div>\n                : <p>Is Loading</p>\n            }\n\n          </div>\n        </ContextProvider>\n      </BrowserRouter>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}